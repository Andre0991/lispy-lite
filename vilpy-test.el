(when (require 'undercover nil t)
  (undercover "vilpy.el" "vilpy-inline.el"))
(require 'vilpy nil t)
(require 'clojure-mode nil t)
(if (version< emacs-version "24.4.1")
    (load-library "cl-indent")
  (require 'cl-indent))
(custom-set-variables
 '(indent-tabs-mode nil))
(setq lisp-indent-function 'common-lisp-indent-function)
(put 'if 'common-lisp-indent-function 2)
(transient-mark-mode 1)

;;* Infrastructure
(defmacro vilpy-with (in &rest body)
  (let ((mode 'emacs-lisp-mode)
        (mark-str "~"))
    (when (symbolp in)
      (setq mode
            (intern
             (concat (symbol-name in) "-mode")))
      (setq in (car body))
      (setq body (cdr body))
      (when (eq mode 'clojure-mode)
        (setq mark-str "&")))
    `(let ((temp-buffer (generate-new-buffer " *temp*")))
       (save-window-excursion
         (unwind-protect
              (progn
                (switch-to-buffer temp-buffer)
                (,mode)
                (transient-mark-mode 1)
                (vilpy-mode)
                (insert ,in)
                (goto-char (point-min))
                (when (search-forward ,mark-str nil t)
                  (backward-delete-char 1)
                  (set-mark (point)))
                (goto-char (point-max))
                (search-backward "|")
                (delete-char 1)
                (setq current-prefix-arg nil)
                ,@(mapcar (lambda (x)
                            (cond ((equal x '(kbd "C-u"))
                                   `(setq current-prefix-arg (list 4)))
                                  ((or (stringp x)
                                       (and (listp x)
                                            (eq (car x) 'kbd)))
                                   `(vilpy-unalias ,x))
                                  (t x))) body)
                (insert "|")
                (when (region-active-p)
                  (exchange-point-and-mark)
                  (insert ,mark-str))
                (buffer-substring-no-properties
                 (point-min)
                 (point-max)))
           (and (buffer-name temp-buffer)
                (kill-buffer temp-buffer))
           (setq last-command nil))))))

(defmacro vilpy-with-v (mode-ext in &rest body)
  (declare (indent 2))
  (let ((mode (cdr (assoc mode-ext '((py . python-mode)
                                     (el . emacs-lisp-mode)
                                     (scm . scheme-mode)
                                     (clj . clojure-mode))))))
    `(with-temp-buffer
       (,mode)
       (vilpy-mode)
       (insert ,in)
       (when (search-backward "~" nil t)
         (delete-char 1)
         (set-mark (point))
         (goto-char (point-max)))
       (search-backward "|")
       (delete-char 1)
       ,@(mapcar (lambda (x) (if (stringp x) `(vilpy-unalias ,x) x)) body))))

(defun vilpy-decode-keysequence (str)
  "Decode STR from e.g. \"23ab5c\" to '(23 \"a\" \"b\" 5 \"c\")"
  (let ((table (copy-sequence (syntax-table))))
    (cl-loop for i from ?0 to ?9 do
         (modify-syntax-entry i "." table))
    (cl-loop for i from ? to ? do
         (modify-syntax-entry i "w" table))
    (cl-loop for i in '(? ?\( ?\) ?\[ ?\] ?{ ?} ?\" ?\' ?\ )
       do (modify-syntax-entry i "w" table))
    (cl-mapcan (lambda (x)
                 (let ((y (ignore-errors (read x))))
                   (if (numberp y)
                       (list y)
                     (mapcar #'string x))))
               (with-syntax-table table
                 (split-string str "\\b" t)))))

(ert-deftest vilpy-decode-keysequence ()
  (should (equal (vilpy-decode-keysequence "23ab50c")
                 '(23 "a" "b" 50 "c")))
  (should (equal (vilpy-decode-keysequence "3\C-d")
                 '(3 "")))
  (should (equal (vilpy-decode-keysequence "3\C-?")
                 '(3 ""))))

(defun vilpy-unalias (seq)
  "Emulate pressing keys decoded from SEQ."
  (if (vectorp seq)
      (vilpy--unalias-key seq)
    (let ((lkeys (vilpy-decode-keysequence seq))
          key)
      (while (setq key (pop lkeys))
        (if (numberp key)
            (let ((current-prefix-arg (list key)))
              (when lkeys
                (vilpy--unalias-key (pop lkeys))))
          (vilpy--unalias-key key))))))

(defun vilpy--unalias-key (key)
  "Call command that corresponds to KEY.
Insert KEY if there's no command."
  (let ((cmd (cdr (or (assoc 'vilpy-mode (minor-mode-key-binding key))
                      (assoc 'vilpy-other-mode (minor-mode-key-binding key))))))
    (if (or (and cmd (or (looking-at vilpy-left)
                         (vilpy-looking-back vilpy-right)
                         (looking-at vilpy-outline)
                         (looking-at ";;")
                         (region-active-p)
                         (and (bolp) (looking-at ";"))))
            (progn
              (setq cmd (key-binding key))
              (not (cond ((eq cmd 'self-insert-command))
                         ((string-match "^special" (symbol-name cmd)))))))
        (progn
          (setq last-command-event (aref key 0))
          (call-interactively cmd)
          (setq last-command cmd))
      (insert key))))

;;* Tests
(ert-deftest vilpy-forward ()
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-forward 1))
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((|a) (b) (c))" (vilpy-forward 1))
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) |(b) (c))" (vilpy-forward 1))
                   "((a) (b)| (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (progn (vilpy-forward 1)
                                                       (vilpy-forward 1)))
                   "((a) (b)| (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-forward 3))
                   "((a) (b) (c)|)"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (progn (vilpy-forward 1)
                                                       (vilpy-forward 1)
                                                       (vilpy-forward 1)
                                                       (vilpy-forward 1)))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-forward 4))
                   "((a) (b) (c)|)"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-forward 40))
                   "((a) (b) (c)|)"))
  (should (string= (vilpy-with "(|(a) (b) (c))"
                               (set-mark (point))
                               (vilpy-forward 1)
                               (call-interactively 'kill-region))
                   "(~| (b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))"
                               (set-mark (point))
                               (vilpy-forward 2)
                               (call-interactively 'kill-region))
                   "(~| (c))"))
  (should (vilpy-with-v el "(|(a) (b) (c))"
                        (set-mark (point))
                        (progn (vilpy-forward 1)
                               (vilpy-forward 1)
                               (vilpy-forward 1))
                        (region-active-p)))
  (should (not (vilpy-with-v el "(a) (b) (c)| " (vilpy-forward 1))))
  (should (not (vilpy-with-v el "(a) (b) (c)|" (vilpy-forward 1))))
  ;; break active region when exiting list
  (should (not (vilpy-with-v el "(|(a) (b) (c))"
                             (set-mark (point))
                             (progn (vilpy-forward 1)
                                    (vilpy-forward 1)
                                    (vilpy-forward 1)
                                    (vilpy-forward 1))
                             (and mark-active (not deactivate-mark)))))
  (should (vilpy-with-v el "(a)| (b)\n" (vilpy-forward 2))))

(ert-deftest vilpy-backward ()
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-backward 1))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "((a)|)" (vilpy-backward 1))
                   "(|(a))"))
  (should (string= (vilpy-with "((|a) (b) (c))" (vilpy-backward 1))
                   "(|(a) (b) (c))"))
  (should (string= (vilpy-with "((a) |(b) (c))" (vilpy-backward 1))
                   "(|(a) (b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (progn (vilpy-backward 1)
                                                       (vilpy-backward 1)))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-backward 3))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-backward 1))
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-backward 4))
                   "(|(a) (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-backward 40))
                   "(|(a) (b) (c))"))
  (should (string= (vilpy-with "((b)|\"foo\")" (vilpy-backward 1))
                   "(|(b)\"foo\")"))
  (should (string= (vilpy-with "(bar)\n;; (foo baar)|" (vilpy-backward 1))
                   "|(bar)\n;; (foo baar)"))
  (should (string= (vilpy-with "(foo)\n;; (foo bar\n;;      tanf)|" (vilpy-backward 1))
                   "|(foo)\n;; (foo bar\n;;      tanf)")))

(ert-deftest vilpy-right ()
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-right 1))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-right 2))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-right 1))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "(|(a) (b) (c))"
                               (vilpy-right 1)
                               (vilpy-right 1))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "((|a) (b) (c))" (vilpy-right 1))
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((|a) (b) (c))"
                               (vilpy-right 1)
                               (vilpy-right 1))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "((|a) (b) (c))" (vilpy-right 2))
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "((a) \"(|foo)\" (c))" (vilpy-right 2))
                   "((a) \"(foo)\" (c))|"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-right 1))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))|))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-right 2))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)))|)"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-right 3))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))|"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-right 9))

                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))|"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-right 1))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))|))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-right 2))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)))|)"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-right 3))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))|"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-right 9))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))|"))
  (should (string= (vilpy-with "|(foo)~" (vilpy-right 1))
                   "~(foo)|"))
  (should (string= (vilpy-with "~(foo)|" (vilpy-right 1))
                   "~(foo)|"))
  (should (string= (vilpy-with "(|asdf ?\\ )"
                               (vilpy-right 1))
                   "(asdf ?\\ )|")))

(ert-deftest vilpy-move-right ()
  (should (string= (vilpy-with "(defn |exclaim~ [exclamation]\n  (str exclamation \"!\"))" (progn (vilpy-clone 1)
                                                                                                  (vilpy-move-right 1)))
                   "(defn exclaim [exclamation]\n  (str exclamation \"!\"))\n|exclaim~"))
  (should (string= (vilpy-with "(progn\n\n  |(sexp1)\n  (sexp2))" (vilpy-move-right 1))
                   "(progn\n\n  (sexp2))\n|(sexp1)")))

(ert-deftest vilpy-move-left ()
  (should (string= (vilpy-with "(progn\n |(sexp1)\n (sexp2))" (vilpy-move-left 1))
                   "|(sexp1)\n(progn\n  (sexp2))")))

(ert-deftest vilpy-down-slurp ()
  (should (string= (vilpy-with "(progn\n\n  |(sexp1)\n  (sexp2))" (vilpy-down-slurp))
                   "(progn\n\n  (|(sexp1)\n   sexp2))"))
  (should (string= (vilpy-with "|(fee) (fi) [fo]" (vilpy-down-slurp))
                   "(|(fee)\n fi) [fo]"))
  (should (string= (vilpy-with "(fee) |(fi) [fo]" (vilpy-down-slurp))
                   "(fee) [|(fi)\n       fo]")))

(ert-deftest vilpy-step-out ()
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-step-out 1))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-step-out 2))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "((a)| (b) (c))" (vilpy-step-out 1))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "((a) (b)| (c))" (vilpy-step-out 1))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "((a) |(b) (c))" (vilpy-step-out 1))
                   "|((a) (b) (c))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-out 1))
                   "(defun foo ()\n  (let ((a 1))\n    |(let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-out 2))
                   "(defun foo ()\n  |(let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-out 3))
                   "|(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-out 9))
                   "|(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-out 1))
                   "(defun foo ()\n  (let ((a 1))\n    |(let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-out 2))
                   "(defun foo ()\n  |(let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-out 3))
                   "|(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-out 9))
                   "|(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (equal (vilpy-with-v el "|(foo)" (vilpy-backward 1)) nil))
  (should (equal (vilpy-with "((foo \"(\"))\n((foo \")\"))\n\"un|expected\"" (vilpy-backward 1))
                 "((foo \"(\"))\n|((foo \")\"))\n\"unexpected\""))
  (should (equal (vilpy-with "(defun charge! ()\n|(run-away))" (vilpy-step-out 1))
                 "|(defun charge! ()\n  (run-away))"))
  (should (string= (vilpy-with "|(foo)~" (vilpy-step-out 1))
                   "|(foo)~"))
  (should (string= (vilpy-with "~(foo)|" (vilpy-step-out 1))
                   "|(foo)~")))

(ert-deftest vilpy-step-in ()
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-step-in 1))
                   "((a) |(b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-step-in 2))
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "((a)| (b) (c))" (vilpy-step-in 1))
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) (b)| (c))" (vilpy-step-in 1))
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) |(b) (c))" (vilpy-step-in 1))
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-in 1))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))|\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-in 2))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2)|)\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-in 3))
                   "(defun foo ()\n  (let ((a 1))|\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      (something)|)))" (vilpy-step-in 9))
                   "(defun foo ()|\n  (let ((a 1))\n    (let ((b 2))\n      (something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-in 1))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-in 2))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))" (vilpy-step-in 3))
                   "(defun foo ()\n  (let ((a 1))\n    (let ((b 2))\n      |(something))))"))
  (should (string= (vilpy-with "|;; herp\n;; (foo)\n;; \n(derp)" (vilpy-step-in 1))
                   ";; herp\n;; (foo)\n;; \n|(derp)")))

(ert-deftest vilpy-down ()
  (should (string= (vilpy-with "(|(a) (b) (c))" "j")
                   "((a) |(b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "jj")
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "2j")
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "jjj")
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "3j")
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "jjjj")
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "4j")
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "(a)| (b)\n" "2j")
                   "(a) (b)|\n"))
  (should (string= (vilpy-with "(foo\n |(one)\n two\n (three)\n (four))" "j")
                   "(foo\n (one)\n two\n |(three)\n (four))"))
  (should (string= (vilpy-with "(foo\n |(one)\n two\n (three)\n (four))" "jj")
                   "(foo\n (one)\n two\n (three)\n |(four))"))
  (should (string= (vilpy-with "(foo\n |(one)\n two\n (three)\n (four))" "jjj")
                   "(foo\n (one)\n two\n (three)\n |(four))"))
  (should (string= (vilpy-with "(foo\n (one)|\n two\n (three)\n (four))" "j")
                   "(foo\n (one)\n two\n (three)|\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)|\n two\n (three)\n (four))" "jj")
                   "(foo\n (one)\n two\n (three)\n (four)|)"))
  (should (string= (vilpy-with "(foo\n (one)|\n two\n (three)\n (four))" "jjj")
                   "(foo\n (one)\n two\n (three)\n (four)|)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar~-baz-flip-flop)" (vilpy-down 1))
                   "(progn\n  foo-|bar-baz~-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar~-baz-flip-flop)" (vilpy-down 5))
                   "(progn\n  foo-bar-baz-|flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar|-baz-flip-flop)" (vilpy-down 1))
                   "(progn\n  foo-~bar-baz|-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar|-baz-flip-flop)" (vilpy-down 5))
                   "(progn\n  foo-bar-baz-~flip-flop|)"))
  (should (string= (vilpy-with "(eval-when-~compile|\n  (require 'cl))" (vilpy-down 1))
                   "(eval-when-~compile|\n  (require 'cl))"))
  (should (string= (vilpy-with "~;; foo|\n(bar)" (vilpy-down 1))
                   ";; foo\n~(bar)|"))
  (should (string= (vilpy-with "~(foo)|\n;; comment\n(bar)" "j")
                   "(foo)\n~;; comment|\n(bar)"))
  (should (string= (vilpy-with "~(foo)|\n;; comment\n(bar)" "jj")
                   "(foo)\n;; comment\n~(bar)|")))

(ert-deftest vilpy-up ()
  (should (string= (vilpy-with "((a) (b) (c)|)" "k")
                   "((a) (b)| (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "kk")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "2k")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "kkk")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "3k")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "kkkk")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "4k")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with ";; \n(foo)\n|(bar)" "2k")
                   ";; \n|(foo)\n(bar)"))
  (should (string= (vilpy-with "(foo\n |(one)\n two\n (three)\n (four))" "k")
                   "(foo\n |(one)\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(foo\n |(one)\n two\n (three)\n (four))" "kk")
                   "(foo\n |(one)\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)|\n two\n (three)\n (four))" "k")
                   "(foo\n (one)|\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)\n two\n (three)|\n (four))" "k")
                   "(foo\n (one)|\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)\n two\n (three)|\n (four))" "kk")
                   "(foo\n (one)|\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)\n two\n (three)\n (four)|)" "k")
                   "(foo\n (one)\n two\n (three)|\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)\n two\n (three)\n (four)|)" "kk")
                   "(foo\n (one)|\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(foo\n (one)\n two\n (three)\n (four)|)" "kk")
                   "(foo\n (one)|\n two\n (three)\n (four))"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-~flip-flop|)" (vilpy-up 1))
                   "(progn\n  foo-bar-~baz-flip|-flop)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-~flip-flop|)" (vilpy-up 5))
                   "(progn\n  ~foo-bar|-baz-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-|flip-flop~)" (vilpy-up 1))
                   "(progn\n  foo-bar-|baz-flip~-flop)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-|flip-flop~)" (vilpy-up 5))
                   "(progn\n  |foo-bar~-baz-flip-flop)"))
  (should (string= (vilpy-with "(foo)\n;; comment\n~(bar)|" "k")
                   "(foo)\n~;; comment|\n(bar)"))
  (should (string= (vilpy-with "(foo)\n;; comment\n~(bar)|" "kk")
                   "~(foo)|\n;; comment\n(bar)"))
  (should (string= (vilpy-with "(foo)\n;; comment\n|(bar)~" "k")
                   "(foo)\n|;; comment~\n(bar)"))
  (should (string= (vilpy-with "(foo)\n;; comment\n|(bar)~" "kk")
                   "|(foo)~\n;; comment\n(bar)"))
  (should (string= (vilpy-with "(~foo| bar)" "k")
                   "(~foo| bar)")))

(ert-deftest vilpy-other ()
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-other))
                   "((a) (b) |(c))"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (progn (vilpy-other) (vilpy-other)))
                   "((a) (b) (c)|)"))
  (should (string= (vilpy-with "((a) (b) (c))|" (vilpy-other))
                   "|((a) (b) (c))")))

(ert-deftest vilpy-go-to-first-defun ()
  (should (string= (vilpy-with "|(a)" (vilpy-go-to-first-defun))
                   "|(a)"))
  (should (string= (vilpy-with "(a) (b) (c |(d))" (vilpy-go-to-first-defun))
                   "|(a) (b) (c (d))"))
  (should (string= (vilpy-with "(a) (b) (c)|" (vilpy-go-to-first-defun))
                   "|(a) (b) (c)"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-go-to-first-defun))
                   "|((a) (b) (c))")))

(ert-deftest vilpy-go-to-last-defun ()
  (should (string= (vilpy-with "|(a)" (vilpy-go-to-last-defun))
                   "|(a)"))
  (should (string= (vilpy-with "(a) (b) (c |(d))" (vilpy-go-to-last-defun))
                   "(a) (b) |(c (d))"))
  (should (string= (vilpy-with "|(a) (b) (c)" (vilpy-go-to-last-defun))
                   "(a) (b) |(c)"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-go-to-last-defun))
                   "|((a) (b) (c))")))

(ert-deftest vilpy-kill ()
  (should (string= (vilpy-with "\n\n|(defun foo ()\n    )" (vilpy-kill))
                   "\n\n|"))
  ;; while ahead of defun, and there's a comment before, move there
  (should (string= (vilpy-with "\n;comment\n|(defun foo ()\n    )" (vilpy-kill))
                   "\n;comment\n|"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "\C-k")
                   "(|)"))
  (should (string= (vilpy-with "((a)\n| (b)\n (c))" "\C-k")
                   "((a)\n|\n (c))"))
  (should (string= (vilpy-with "((a) |(b) (c))" "\C-k")
                   "((a) |)"))
  (should (string= (vilpy-with "((a) (b) |(c))" "\C-k")
                   "((a) (b) |)"))
  (should (string= (vilpy-with "((a)|\n (b) (c))" "\C-k")
                   "((a)| (b) (c))"))
  (should (string= (vilpy-with "((a)|\n (b) (c))" "\C-k\C-k")
                   "((a)|)"))
  (should (string= (vilpy-with "(a b c)\n(|)" "\C-k")
                   "(a b c)\n|"))
  (should (string= (vilpy-with "(foo\nbar | baz  )" "\C-k")
                   "(foo\nbar |)"))
  (should (string= (vilpy-with "[1 |2 3]" "\C-k")
                   "[1 |]"))
  (should (string= (vilpy-with "(looking-at |\"foo\")" "\C-k")
                   "(looking-at |)"))
  (should (string= (vilpy-with "(looking-at |\"foo\" (bar))" "\C-k")
                   "(looking-at |)"))
  (should (string= (vilpy-with "(list |\"foo\"\n      (bar))" "\C-k")
                   "(list |\n      (bar))"))
  (should (string= (vilpy-with "(looking-at \"|;\")" "\C-k")
                   "(looking-at \"|\")"))
  (should (string= (vilpy-with "(foo)|   ;bar\n(baz)" "\C-k")
                   "(foo)|\n(baz)"))
  (should (string= (vilpy-with "|#[foo\n  bar]" "\C-k")
                   "|"))
  (should (string= (vilpy-with "|#(foo\n  bar)" "\C-k")
                   "|"))
  (should (string= (vilpy-with clojure "{:a 1 |:b 2}" "\C-k")
                   "{:a 1 |}"))
  (should (string= (vilpy-with "|\"multiline\nstring\"\n(expr)" "\C-k")
                   "|\n(expr)"))
  (should (string= (vilpy-with "(defun vilpy-kill-test ()\n  |(foo\n    bar baz)\n  (1 2 3)\n  (a b c))" "\C-k")
                   "(defun vilpy-kill-test ()\n  |\n  (1 2 3)\n  (a b c))"))
  (should (string= (vilpy-with "(defun test ()\n  |(foo)) ;; comment" "\C-k")
                   "(defun test ()\n  |) ;; comment"))
  (should (string= (vilpy-with "(progn\n  |(looking-at-p \"\\(\"))" "\C-k")
                   "(progn\n  |)"))
  (should (string= (vilpy-with "(progn\n|  ;;  Comment\n  (new-code))" "\C-k")
                   "(progn\n|\n  (new-code))"))
  (should (equal (vilpy-with "(progn\n  |\"test\" \n  (bar))"
                             "\C-k")
                 "(progn\n  |\n  (bar))"))
  (should (equal (vilpy-with "(progn\n|  \"docs\" ;;  0\n  (one)  ;;  1\n  )"
                             "\C-k")
                 "(progn\n|\n  (one)  ;;  1\n  )")))

(ert-deftest vilpy-delete ()
  (should (string= (vilpy-with "(|(a) (b) (c))" "\C-d")
                   "(|(b) (c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "2\C-d")
                   "(|(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "3\C-d")
                   "(|)"))
  (should (string= (vilpy-with "(|(a) (b) (c))" "3\C-d\C-d")
                   "|()"))
  (should (string= (vilpy-with "(|(a) \"foo\")" "\C-d")
                   "(|\"foo\")"))
  (should (string= (vilpy-with "(|(a)\"foo\")" "\C-d")
                   "(|\"foo\")"))
  (should (string= (vilpy-with "(|(a) b (c))" "\C-d")
                   "(|b (c))"))
  (should (string= (vilpy-with "((a) |\"foo\" (c))" "\C-d")
                   "((a) |(c))"))
  (should (string= (vilpy-with "((a) (|) (c))" "\C-d")
                   "((a) |() (c))"))
  (should (string= (vilpy-with "(a (|) c)" "\C-d")
                   "(a |() c)"))
  (should (string= (vilpy-with "(foo \"bar|\")" "\C-d")
                   "(foo |\"bar\")"))
  (should (string= (vilpy-with "\"foo|\\\"\\\"\"" "\C-d")
                   "\"foo|\\\"\""))
  (should (string= (vilpy-with "\"|\\\\(foo\\\\)\"" "\C-d")
                   "\"|foo\""))
  (should (string= (vilpy-with "\"\\\\(foo|\\\\)\"" "\C-d")
                   "\"foo|\""))
  (should (string= (vilpy-with "(looking-at \"\\\\([a-z]+|\\\\)\")" "\C-d")
                   "(looking-at \"[a-z]+|\")"))
  (should (string= (vilpy-with "(progn `|(foobar) (foo))" "\C-d")
                   "(progn |(foo))"))
  (should (string= (vilpy-with "(require 'foo)\n\n|(require 'bar)\n\n(require 'baz)" "\C-d")
                   "(require 'foo)\n\n|(require 'baz)"))
  (should (string= (vilpy-with "|\n(foo)" "\C-d")
                   "|(foo)"))
  (should (string= (vilpy-with "\"\\|\"\"" "\C-d")
                   "\"|\""))
  (should (string= (vilpy-with "|(require 'foo)\n\n;; comment" "\C-d")
                   "|\n\n;; comment"))
  (should (string= (vilpy-with "(progn\n  |;; a comment\n  (test))" "\C-d")
                   "(progn\n  |\n  (test))"))
  (should (string= (vilpy-with "|;; a comment\n(test))" "\C-d")
                   "|\n(test))"))
  (should (string= (vilpy-with "(defun foobar |()   \n  (this-and-that))" "\C-d")
                   "(defun foobar |\n  (this-and-that))"))
  (should (string= (vilpy-with "(defun foobar |\n  (this-and-that))" "\C-d")
                   "(defun foobar |(this-and-that))"))
  (should (string= (vilpy-with "((a) |\"foo\" (c))"
                               (vilpy-delete -1))
                   "(|\"foo\" (c))"))
  (should (string= (vilpy-with "(a)'|(b)" "\C-d") "(a)|"))
  ;; test that quotes also get deleted
  (should (string= (vilpy-with "'|()" "\C-d")
                   "|"))
  (should (string= (vilpy-with "(,@|())" "\C-d")
                   "(|)"))
  (should (string= (vilpy-with "#2A|((a b) (0 1))" "\C-d")
                   "|"))
  (let ((vilpy-safe-delete t))
    ;; region is already safe
    (should (string= (vilpy-with "((a) ~(b (c (d)))|)" "\C-d")
                     "((a) ~|)"))
    ;; region cannot be made safe
    (should (string= (vilpy-with "~(|a)" "\C-d")
                     "~(|a)"))
    ;; region can be safely dealt with
    (should (string= (vilpy-with "(~a) |" "\C-d")
                     "(~)|"))
    (should (string= (vilpy-with "~ (a|)" "\C-d")
                     "~(|)"))
    (should (string= (vilpy-with "(a ~((b)|))" "\C-d")
                     "(a ~(|))"))
    (should (string= (vilpy-with "(a~ b)\n(c |d)" "\C-d")
                     "(a~)(|d)"))
    (should (string= (vilpy-with "(a~ b) (c d) (e |f)" "\C-d")
                     "(a~)(|f)"))
    (should (string= (vilpy-with "((((a ~b))))\n ((((c| d))))" "\C-d")
                     "((((a ~))))((((| d))))"))
    (should (string= (vilpy-with "(((a\n ~(b c))))|" "\C-d")
                     "(((a\n ~)))|"))
    (should (string= (vilpy-with "~((((a b)|\n c)))" "\C-d")
                     "~(((|\n c)))"))
    (should (string= (vilpy-with "(((a\n ~(b c)\n d)|))" "\C-d")
                     "(((a\n ~)|))"))
    (should (string= (vilpy-with "((~(a\n (b c)|\n d)))" "\C-d")
                     "((~(|\n d)))"))
    ;; strings
    (should (string= (vilpy-with "~\"I am your |king.\"" "\C-d")
                     "~\"|king.\""))
    (should (string= (vilpy-with "\"elder~berries\" \"a |witch\"" "\C-d")
                     "\"elder~\"\"|witch\""))
    (should (string= (vilpy-with "~(1 (2 (3 \"a |duck\")))" "\C-d")
                     "~(((\"|duck\")))"))
    (should (string= (vilpy-with "(((\"a ~duck\" 3) 2) 1)|" "\C-d")
                     "(((\"a ~\")))|"))
    ;; test ignoring delimiters in strings
    (should (string= (vilpy-with "\"~( is a left paren.|\"" "\C-d")
                     "\"~|\""))
    (should (string= (vilpy-with "~a \"([[{b |c\"" "\C-d")
                     "~\"|c\""))
    (should (string= (vilpy-with "\"a ~b)]}\" c|" "\C-d")
                     "\"a ~\"|"))
    (should (string= (vilpy-with "~a \"(b {c]\" d|" "\C-d")
                     "~|"))
    (should (string= (vilpy-with "a \"~(\"\"]\" \"((|)\" b" "\C-d")
                     "a \"~\"\"|)\" b"))
    ;; test that a right quote at end of the region is not deleted
    (should (string= (vilpy-with "\"a ~string\"|" "\C-d")
                     "\"a ~\"|"))
    ;; mixed
    (should (string= (vilpy-with "~{[(a b \"(c|\" d)]}" "\C-d")
                     "~{[(\"|\" d)]}"))
    ;; test ignoring delimiters in comments
    (should (string= (vilpy-with "~;; ([[{{|" "\C-d")
                     "~|"))
    (should (string= (vilpy-with ";; ~([[{{\n a|" "\C-d")
                     ";; ~|"))
    (should (string= (vilpy-with "~{[(a\n b\n ;; ]{](\n| d)]}" "\C-d")
                     "~{[(| d)]}"))
    (should (string= (vilpy-with "{[(a~\n b\n ;; ]{](\n d)]}|" "\C-d")
                     "{[(a~)]}|"))
    ;; delimiters before comments shouldn't be considered part of the comment
    (should (string= (vilpy-with "~(;; a\n |b)" "\C-d")
                     "~(|b)"))
    ;; both mixed
    (should (string= (vilpy-with "{[(a\n~   b \"c [(d e}\"\n   ;;({]\n|   f)]}"
                                 "\C-d")
                     "{[(a\n~|   f)]}"))
    (let ((vilpy-safe-actions-no-pull-delimiters-into-comments t))
      (should (string= (vilpy-with "(a\n;; foo~bar\n|b)" "\C-d")
                       "(a\n;; foo~\n|b)"))
      (should (string= (vilpy-with "(a\n;; foo~bar\nb|)" "\C-d")
                       "(a\n;; foo~\n|)"))
      (should (string= (vilpy-with "(a\n;; foo~bar\nb)|" "\C-d")
                       "(a\n;; foo~\n)|"))
      ;; test that full comments are deleted with their newlines
      (should (string= (vilpy-with ";; foo\n~;;bar\n|(baz)" "\C-d")
                       ";; foo\n~|(baz)"))
      (should (string= (vilpy-with ";; foo\n~;;bar\n|(baz\n qux)" "\C-d")
                       ";; foo\n~|(baz\n qux)"))))

  (let ((vilpy-delete-sexp-from-within t))
    (should (string= (vilpy-with "(|)" "\C-d") "|"))
    (should (string= (vilpy-with "(foo|)" "\C-d") "|"))
    (should (string= (vilpy-with "\"|\"" "\C-d") "|"))
    (should (string= (vilpy-with "\"foo|\"" "\C-d") "|"))))

(ert-deftest vilpy-delete-backward ()
  (should (string= (vilpy-with "((a) (b) (c)|)" "\C-?")
                   "((a) (b)|)"))
  (should (string= (vilpy-with "(list)(foo)|" "\C-?")
                   "(list)|"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "2\C-?")
                   "((a)|)"))
  (should (string= (vilpy-with "((a) (b) (c)|)" "3\C-?")
                   "(|)"))
  (should (string= (vilpy-with "(a (b)| c)" "\C-?")
                   "(a| c)"))
  (should (string= (vilpy-with "(a (|) c)" "\C-?")
                   "(a| c)"))
  (should (string= (vilpy-with "(foo \"|bar\")" "\C-?")
                   "(foo \"bar\"|)"))
  (should (string= (vilpy-with "(a \"\"| c)" "\C-?")
                   "(a| c)"))
  (should (string= (vilpy-with "(a        \"\"| c)" "\C-?")
                   "(a| c)"))
  (should (string= (vilpy-with ";|" "\C-?")
                   "|"))
  (should (string= (vilpy-with "\"\\\\(|foo\\\\)\"" "\C-?")
                   "\"|foo\""))
  (should (string= (vilpy-with "\"\\\\(foo\\\\)|\"" "\C-?")
                   "\"foo|\""))
  (should (string= (vilpy-with "\"\\\\(|foo\"" "\C-?")
                   "\"\\\\|foo\""))
  (should (string= (vilpy-with "(foo)\n;; ()|" "\C-?")
                   "(foo)\n;; (|"))
  (should (string= (vilpy-with "(~\"foo\"|)" "\C-?")
                   "(~|)"))
  (should (string= (vilpy-with "(|\"foo\"~)" "\C-?")
                   "(~|)"))
  (should (string= (vilpy-with "(foo bar)\n;; comment\n(foo bar)|" "\C-?")
                   "(foo bar)\n;; comment\n|"))
  (should (string= (vilpy-with "(require 'foo)\n\n(require 'bar)|\n\n(require 'baz)" "\C-?")
                   "(require 'foo)\n\n|\n\n(require 'baz)"))
  (should (string= (vilpy-with "(list\n (foo)\n |(bar))" "\C-?")
                   "(list\n (foo) |(bar))"))
  (should (string= (vilpy-with "(list\n (foo)\n |\"bar\")" "\C-?")
                   "(list\n (foo) |\"bar\")"))
  (should (string= (vilpy-with "   |(foo)" "\C-?")
                   "|(foo)"))
  (should (string= (vilpy-with "(foo (bar) |)" "\C-?")
                   "(foo (bar)|)"))
  (should (string= (vilpy-with "(bar)\n;; bar\n|(baz)" "\C-?")
                   "(bar)\n|(baz)"))
  (should (string= (vilpy-with "(bar)\n;; bar\n   |(baz)" "\C-?")
                   "(bar)\n|(baz)"))
  (should (string= (vilpy-with "(\n |(a))" "\C-?")
                   "(|(a))"))
  (should (string= (vilpy-with "(list (foo) |(bar))" "\C-?")
                   "(list |(bar))"))
  (should (string= (vilpy-with "(list (foo) |\"bar\")" "\C-?")
                   "(list |\"bar\")"))
  (should (string= (vilpy-with "\"We want...\"         |\"a shrubbery!\"" "\C-?")
                   "\"We want...\" |\"a shrubbery!\""))
  (should (string= (vilpy-with "\"\\C|-j\"" "\C-?")
                   "\"|-j\""))
  (should (string= (vilpy-with "(progn\n  (foo)\n\n  |;; upcoming magic\n  (magic))" "\C-?")
                   "(progn\n  (foo)\n  |;; upcoming magic\n  (magic))"))
  (should (string= (vilpy-with "(list \"foo\" |)" "\C-?")
                   "(list \"foo\"|)"))
  (should (string= (vilpy-with "\"a\\n|\"" "\C-?")
                   "\"a|\""))
  (should (string= (vilpy-with "\"\\\\n|\"" "\C-?")
                   "\"\\\\|\""))
  (should (string= (vilpy-with "((a) |(b) (c))"
                               (vilpy-delete-backward -1))
                   "((a) |(c))"))
  (should (string= (vilpy-with ";; foo\n|\n(bar)" "\C-?")
                   ";; foo|\n(bar)"))
  (should (string= (vilpy-with "(foo ?{|)" "\C-?")
                   "(foo ?|)"))
  (should (string= (vilpy-with "(foo ?}|)" "\C-?")
                   "(foo ?|)"))
  (should (string= (vilpy-with "(list \"string\" |[1 2])" "\C-?")
                   "(list |[1 2])"))
  (should (string= (vilpy-with "#2A((a b) (0 1))|" "\C-?")
                   "|"))
  (should (string= (vilpy-with clojure "(partial filter neg?)|" "\C-?")
                   "|"))
  (let ((vilpy-delete-sexp-from-within t))
    (should (string= (vilpy-with "(|)" "\C-?") "|"))
    (should (string= (vilpy-with "(|foo)" "\C-?") "|"))
    (should (string= (vilpy-with "\"|\"" "\C-?") "|"))
    (should (string= (vilpy-with "\"|foo\"" "\C-?") "|")))

  (should (string= (vilpy-with "(foo                                    ; |\n)" "\C-?")
                   "(foo|)"))
  (should (string= (vilpy-with "(foo\n ;; |\n)" "\C-?") "(foo\n |\n)"))
  (should (string= (vilpy-with "(foo) ;; |" "\C-?") "(foo)|"))
  (should (string= (vilpy-with "(foo ;; |\n)" "\C-?") "(foo|)"))
  (should (string= (vilpy-with " |;;" "\C-?")
                   "|;;"))
  (should (string= (vilpy-with "  |;;" "\C-?")
                   "|;;"))
  (should (string= (vilpy-with clojure "(foo bar?)|" "\C-?") "|")))

(ert-deftest vilpy-pair ()
  (should (string= (vilpy-with "\"\\\\|\"" "(")
                   "\"\\\\(|\\\\)\""))
  (should (string= (vilpy-with "\"\\\\|\"" "{")
                   "\"\\\\{|\\\\}\""))
  (should (string= (vilpy-with "|foo bar~" "(")
                   "|(foo bar)"))
  (should (string= (vilpy-with "~foo bar|" "(")
                   "|(foo bar)"))
  (should (string= (vilpy-with "(progn\n|\n (foo))" "1(")
                   "(progn\n  (|\n   (foo)))"))
  (should (string= (vilpy-with "a| b c" (kbd "C-u") "(")
                   "(| a) b c"))
  (should (string= (vilpy-with "a| b c" (setq current-prefix-arg 1) "(")
                   "(| a) b c"))
  (should (string= (vilpy-with "a| b c" (setq current-prefix-arg 2) "(")
                   "(| a b) c"))
  (should (string= (vilpy-with "a| b c" (setq current-prefix-arg 3) "(")
                   "(| a b c)"))
  (should (string= (vilpy-with "a| b c" (setq current-prefix-arg 0) "(")
                   "(| a b c)"))
  (should (string= (vilpy-with "a| b c" (setq current-prefix-arg -1) "(")
                   "(| a b c)"))
  (should (string= (vilpy-with "|(a b c)\n(d e f)" (setq current-prefix-arg -1) "(")
                   "(| (a b c))\n(d e f)"))
  (should (string= (vilpy-with "|(a b c)\n(d e f)" (setq current-prefix-arg 0) "(")
                   "(| (a b c)\n (d e f))"))
  (should (string= (vilpy-with "|" (setq current-prefix-arg -1) "(")
                   "(|)"))
  (should (string= (vilpy-with "(|)" (setq current-prefix-arg -1) "(")
                   "((|))"))
  (should (string= (vilpy-with "(a |)" (setq current-prefix-arg -1) "(")
                   "(a (|))"))
  (should (string= (vilpy-with "(| a)" (setq current-prefix-arg -1) "(")
                   "((| a))"))
  (should (string= (vilpy-with "(a | b)" (setq current-prefix-arg -1) "(")
                   "(a (| b))"))
  (should (string= (vilpy-with "(a |\n )" (setq current-prefix-arg -1) "(")
                   "(a (|)\n )"))
  (should (string= (vilpy-with "(|\n )" (setq current-prefix-arg -1) "(")
                   "((|)\n )"))
  (should (string= (vilpy-with "(a\n |)" (setq current-prefix-arg -1) "(")
                   "(a\n (|))"))
  (should (string= (vilpy-with "(a '|)" (setq current-prefix-arg -1) "(")
                   "(a '(|))"))
  (should (string= (vilpy-with "(a |) " (setq current-prefix-arg -1) "(")
                   "(a (|)) "))
  (let (vilpy-insert-space-after-wrap)
    (should (string= (vilpy-with "a| b c" (kbd "C-u") "(")
                     "(|a) b c"))))

(ert-deftest vilpy--sub-slurp-forward ()
  (should (eq (vilpy-with-v el "(progn\n  ~foo|-bar-baz-flip-flop)"
                                (vilpy--sub-slurp-forward 1)) 1))
  (should (eq (vilpy-with-v el "(progn\n  ~foo|-bar-baz-flip-flop)"
                                (vilpy--sub-slurp-forward 4)) 4))
  (should (eq (vilpy-with-v el "(progn\n  ~foo|-bar-baz-flip-flop)"
                                (vilpy--sub-slurp-forward 5)) 4))
  (should (eq (vilpy-with-v el "(progn\n  ~foo|-bar-baz-flip-flop)"
                                (vilpy--sub-slurp-forward 10)) 4))
  (should (eq (vilpy-with-v el "(progn\n  ~foo|-bar-baz-flip-flop)"
                                (vilpy--sub-slurp-forward 5)
                                (vilpy--sub-slurp-forward 1)) nil)))

(ert-deftest vilpy--sub-slurp-backward ()
  (should (eq (vilpy-with-v el "(progn\n  foo-bar-baz-flip-|flop~)"
                                (vilpy--sub-slurp-backward 1)) 1))
  (should (eq (vilpy-with-v el "(progn\n  foo-bar-baz-flip-|flop~)"
                                (vilpy--sub-slurp-backward 4)) 4))
  (should (eq (vilpy-with-v el "(progn\n  foo-bar-baz-flip-|flop~)"
                                (vilpy--sub-slurp-backward 5)) 4))
  (should (eq (vilpy-with-v el "(progn\n  foo-bar-baz-flip-|flop~)"
                                (vilpy--sub-slurp-backward 5)
                                (vilpy--sub-slurp-backward 1)) nil)))

(ert-deftest vilpy-slurp ()
  (should (string= (vilpy-with "()|(a) (b) (c)" ">")
                   "((a))| (b) (c)"))
  (should (string= (vilpy-with "()|(a) (b) (c)" ">>")
                   "((a) (b))| (c)"))
  (should (string= (vilpy-with "()|(a) (b) (c)" ">>>")
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "()|(a) (b) (c)" ">>>>")
                   "((a) (b) (c))|"))
  (should (string= (vilpy-with "(a) (b) (c)|()" ">")
                   "(a) (b) (c ())|"))
  (should (string= (vilpy-with "(a) (b) (c) |()" ">>")
                   "(a) |((b) (c) )"))
  (should (string= (vilpy-with "(a) (b) (c) |()" ">>>")
                   "|((a) (b) (c) )"))
  (should (string= (vilpy-with "(a) (b) (c) |()" ">>>>")
                   "|((a) (b) (c) )"))
  (should (string= (vilpy-with "(insert)|\"foo\"" ">")
                   "(insert \"foo\")|"))
  (should (string= (vilpy-with "(foo) #_~(bar)| (baz)" ">")
                   "(foo) #_~(bar) (baz)|"))
  (should (string= (vilpy-with "(foo) #_|(bar)~ (baz)" ">")
                   "(foo) |#_(bar)~ (baz)"))
  (should (string= (vilpy-with "|(a) (b) (c)" "m>")
                   "~(a) (b)| (c)"))
  (should (string= (vilpy-with "(progn\n  ~foo|-bar-baz-flip-flop)" (vilpy-slurp 1))
                   "(progn\n  ~foo-bar|-baz-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo|-bar-baz-flip-flop)" (vilpy-slurp 2))
                   "(progn\n  ~foo-bar-baz|-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo|-bar-baz-flip-flop)" (vilpy-slurp 3))
                   "(progn\n  ~foo-bar-baz-flip|-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo|-bar-baz-flip-flop)" (vilpy-slurp 4))
                   "(progn\n  ~foo-bar-baz-flip-flop|)"))
  (should (string= (vilpy-with "(progn\n  ~foo|-bar-baz-flip-flop)" (vilpy-slurp 5))
                   "(progn\n  ~foo-bar-baz-flip-flop|)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-flip-|flop~)" (vilpy-slurp 1))
                   "(progn\n  foo-bar-baz-|flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-flip-|flop~)" (vilpy-slurp 2))
                   "(progn\n  foo-bar-|baz-flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-flip-|flop~)" (vilpy-slurp 3))
                   "(progn\n  foo-|bar-baz-flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-flip-|flop~)" (vilpy-slurp 4))
                   "(progn\n  |foo-bar-baz-flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  foo-bar-baz-flip-|flop~)" (vilpy-slurp 5))
                   "(progn\n  |foo-bar-baz-flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar~-baz-flip-flop)" (vilpy-slurp 1))
                   "(progn\n  |foo-bar~-baz-flip-flop)"))
  (should (string= (vilpy-with "()|   foo" (vilpy-slurp 1))
                   "(foo)|"))
  (should (string= (vilpy-with "(progn\n  ~(foo)|\n  ;; comment 1\n  ;; comment 2\n  (bar))" ">")
                   "(progn\n  ~(foo)\n  ;; comment 1\n  ;; comment 2|\n  (bar))"))
  (should (string= (vilpy-with "(progn\n  (foo)\n  ;; comment 1\n  ;; comment 2\n  |(bar)~)" ">")
                   "(progn\n  (foo)\n  |;; comment 1\n  ;; comment 2\n  (bar)~)"))
  (should (string= (vilpy-with "((a)| b c)" (vilpy-slurp -1))
                   "((a b c)|)"))
  (should (string= (vilpy-with "()|(a) (b)\n(c) (d)" (vilpy-slurp -1))
                   "((a) (b))|\n(c) (d)"))
  (should (string= (vilpy-with "(a (b (c)| d) e)" (vilpy-slurp -1))
                   "(a (b (c d)|) e)"))
  (should (string= (vilpy-with "(a b |(c))" (vilpy-slurp -1))
                   "(|(a b c))"))
  (should (string= (vilpy-with "(a) (b)\n(c) (d) |((e))" (vilpy-slurp -1))
                   "(a) (b)\n|((c) (d) (e))"))
  (should (string= (vilpy-with "(a (b |(c) d) e)" (vilpy-slurp -1))
                   "(a (|(b c) d) e)"))
  (should (string= (vilpy-with "()|(a) (b)\n(c) (d)" (vilpy-slurp 0))
                   "((a) (b)\n (c) (d))|"))
  (should (string= (vilpy-with "(()|(a) (b)\n (c) (d))\n(e) (f)" (vilpy-slurp 0))
                   "(((a) (b)\n  (c) (d))|)\n(e) (f)"))
  (should (string= (vilpy-with "(a (b (c)| d) e)" (vilpy-slurp 0))
                   "(a (b (c d)|) e)"))
  (should (string= (vilpy-with "(a) (b)\n(c) (d) |((e))" (vilpy-slurp 0))
                   "|((a) (b)\n (c) (d) (e))"))
  (should (string= (vilpy-with "(a) (b)\n((c) (d)\n (e) |((f)))" (vilpy-slurp 0))
                   "(a) (b)\n(|((c) (d)\n  (e) (f)))"))
  (should (string= (vilpy-with "(a (b |(c) d) e)" (vilpy-slurp 0))
                   "(a (|(b c) d) e)"))
  (should (string= (vilpy-with "(~|a (b c) d\n e f)" (vilpy-slurp -1))
                   "(~a (b c) d|\n e f)"))
  (should (string= (vilpy-with "(~|a (b c) d\n e f)" (vilpy-slurp 0))
                   "(~a (b c) d\n e f|)"))
  (should (string= (vilpy-with "(a b\n   c (d e) |f~)" (vilpy-slurp -1))
                   "(a b\n   |c (d e) f~)"))
  (should (string= (vilpy-with "(a b\n   c (d e) |f~)" (vilpy-slurp 0))
                   "(|a b\n   c (d e) f~)"))
  (should (string= (vilpy-with "(a (~|b c) d)" (vilpy-slurp -1))
                   "(a (~b c|) d)"))
  (should (string= (vilpy-with "(a (~|b c) d)" (vilpy-slurp 0))
                   "(a (~b c|) d)"))
  (should (string= (vilpy-with "(a (b |c~) d)" (vilpy-slurp -1))
                   "(a (|b c~) d)"))
  (should (string= (vilpy-with "(a (b |c~) d)" (vilpy-slurp 0))
                   "(a (|b c~) d)"))
  (should (string= (vilpy-with "~|a b c" (vilpy-slurp -1))
                   "~a b c|"))
  (should (string= (vilpy-with "~|a b c" (vilpy-slurp 0))
                   "~a b c|"))
  (should (string= (vilpy-with "a b |c~" (vilpy-slurp -1))
                   "|a b c~"))
  (should (string= (vilpy-with "a b |c~" (vilpy-slurp 0))
                   "|a b c~"))
  ;; before a multi-line list
  (should (string= (vilpy-with "()| (a\n    b)" (vilpy-slurp -1))
                   "((a\n  b))|"))
  (should (string= (vilpy-with "~|(a\n b)" (vilpy-slurp -1))
                   "~(a\n b)|")))

(ert-deftest vilpy-barf ()
  (should (string= (vilpy-with "((a) (b) (c))|" "<")
                   "((a) (b))| (c)"))
  (should (string= (vilpy-with "((a) (b) (c))|" "<<")
                   "((a))| (b) (c)"))
  (should (string= (vilpy-with "((a) (b) (c))|" "<<<")
                   "()|(a) (b) (c)"))
  (should (string= (vilpy-with "((a) (b) (c))|" "<<<<")
                   "()|(a) (b) (c)"))
  (should (string= (vilpy-with "|((a) (b) (c))" "<")
                   "(a) |((b) (c))"))
  (should (string= (vilpy-with "|((a) (b) (c))" "<<")
                   "(a) (b) |((c))"))
  (should (string= (vilpy-with "|((a) (b) (c))" "<<<")
                   "(a) (b) (c)|()"))
  (should (string= (vilpy-with "|((a) (b) (c))" "<<<<")
                   "(a) (b) (c)|()"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar-baz-flip-flop|)" (vilpy-barf 1))
                   "(progn\n  ~foo-bar-baz-flip|-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar-baz-flip-flop|)" (vilpy-barf 2))
                   "(progn\n  ~foo-bar-baz|-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar-baz-flip-flop|)" (vilpy-barf 3))
                   "(progn\n  ~foo-bar|-baz-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar-baz-flip-flop|)" (vilpy-barf 4))
                   "(progn\n  ~foo|-bar-baz-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  ~foo-bar-baz-flip-flop|)" (vilpy-barf 5))
                   "(progn\n  ~foo|-bar-baz-flip-flop)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar-baz-flip-flop~)" (vilpy-barf 1))
                   "(progn\n  foo-|bar-baz-flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar-baz-flip-flop~)" (vilpy-barf 2))
                   "(progn\n  foo-bar-|baz-flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar-baz-flip-flop~)" (vilpy-barf 3))
                   "(progn\n  foo-bar-baz-|flip-flop~)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar-baz-flip-flop~)" (vilpy-barf 4))
                   "(progn\n  foo-bar-baz-flip-|flop~)"))
  (should (string= (vilpy-with "(progn\n  |foo-bar-baz-flip-flop~)" (vilpy-barf 5))
                   "(progn\n  foo-bar-baz-flip-|flop~)"))
  (should (string= (vilpy-with "(progn\n  ~(foo)\n  ;; comment 1\n  ;; comment 2|\n  (bar))" "<")
                   "(progn\n  ~(foo)|\n  ;; comment 1\n  ;; comment 2\n  (bar))"))
  (should (string= (vilpy-with "(progn\n  (foo)\n  ~;; bar|\n  (baz))" "<")
                   "(progn\n  (foo)\n  ~;; bar|\n  (baz))")))

(ert-deftest vilpy-splice ()
  (should (string= (vilpy-with "(|(a) (b) (c))" (vilpy-splice 1))
                   "(a |(b) (c))"))
  (should (string= (vilpy-with "((a) |(b) (c))" (vilpy-splice 1))
                   "((a) b |(c))"))
  (should (string= (vilpy-with "(|(a) (b) (c))" (progn (vilpy-splice 1)
                                                       (vilpy-splice 1)
                                                       (vilpy-splice 1)))
                   "|(a b c)"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (vilpy-splice 1))
                   "((a) (b)| c)"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (progn (vilpy-splice 1)
                                                       (vilpy-splice 1)))
                   "((a)| b c)"))
  (should (string= (vilpy-with "((a) (b) (c)|)" (progn (vilpy-splice 1)
                                                       (vilpy-splice 1)
                                                       (vilpy-splice 1)))
                   "(a b c)|"))
  (should (string= (vilpy-with "|(a b c)" (vilpy-splice 1))
                   "|a b c"))
  (should (string= (vilpy-with "(a b c)|" (vilpy-splice 1))
                   "a b c|"))
  (should (string= (vilpy-with "(a ~'(b c)|)" (vilpy-splice 1))
                   "(a ~b c|)"))
  (should (string= (vilpy-with "(a |'(b c)~)" (vilpy-splice 1))
                   "(a |b c~)"))
  (should (string= (vilpy-with "(a '(b c)|)" (vilpy-splice 1))
                   "(a b c)|"))
  (should (string= (vilpy-with "(asdf)\n(progn\n  |(foo)\n  (bar))\n(asdf)"
                               (progn (vilpy-splice 1)
                                      (vilpy-splice 1)))
                   "(asdf)\n|(progn\n  foo\n  bar)\n(asdf)"))
  (should (string= (vilpy-with "(asdf)\n(progn\n  (foo)\n  (bar)|)\n(asdf)"
                               (progn (vilpy-splice 1)
                                      (vilpy-splice 1)))
                   "(asdf)\n(progn\n  foo\n  bar)|\n(asdf)"))
  ;; test that quotes also get deleted
  (should (string= (vilpy-with "'|(a)" (vilpy-splice 1))
                   "|a"))
  (should (string= (vilpy-with "(,@|(a))" (vilpy-splice 1))
                   "|(a)"))
  (should (string= (vilpy-with "#2A|((a b) (0 1))" (vilpy-splice 1))
                   "|(a b) (0 1)"))
  ;; let splicing
  (should (string= (vilpy-with "(let (foo)\n  |(let ((bar (point)))\n    (baz)))" (vilpy-splice 1))
                   "(let (foo\n      |(bar (point)))\n  (baz))"))
  (should (string= (vilpy-with "(let ((foo (point)))\n  |(let ((bar (1+ foo)))\n    (baz)))" (vilpy-splice 1))
                   "(let* ((foo (point))\n       |(bar (1+ foo)))\n  (baz))"))
  (should (string= (vilpy-with "|(let (foo)\n  (let ((bar (point)))\n    (baz)))" (vilpy-splice 1))
                   "let |(foo)\n  (let ((bar (point)))\n    (baz))"))
  (should (string= (vilpy-with clojure "(let [foo 10]\n  |(let [bar 20]\n    (baz)))" (vilpy-splice 1))
                   "|(let [foo 10\n      bar 20]\n  (baz))")))

(ert-deftest vilpy-raise ()
  (should (string= (vilpy-with "(if (and |(pred1) (pred2))\n    (thing1)\n  (thing2))" "r")
                   "(if |(pred1)\n    (thing1)\n  (thing2))"))
  (should (string= (vilpy-with "(if (and (pred1) |(pred2))\n    (thing1)\n  (thing2))" "r")
                   "(if |(pred2)\n    (thing1)\n  (thing2))"))
  (should (string= (vilpy-with "(if (and (pred1)| (pred2))\n    (thing1)\n  (thing2))" "r")
                   "(if (pred1)|\n    (thing1)\n  (thing2))"))
  (should (string= (vilpy-with "(if (and (pred1) (pred2)|)\n    (thing1)\n  (thing2))" "r")
                   "(if (pred2)|\n    (thing1)\n  (thing2))"))
  (should (string= (vilpy-with "(if (and (pred1) (pred2))\n    |(thing1)\n  (thing2))" "r")
                   "|(thing1)"))
  (should (string= (vilpy-with "(if (and (pred1) (pred2))\n    (thing1)|\n  (thing2))" "r")
                   "(thing1)|"))
  (should (string= (vilpy-with "(if (and (pred1) (pred2))\n    (thing1)\n  |(thing2))" "r")
                   "|(thing2)"))
  (should (string= (vilpy-with "(if (and (pred1) (pred2))\n    (thing1)\n  (thing2)|)" "r")
                   "(thing2)|"))
  (should (string= (vilpy-with "(foo (bar |(baz)))" "r")
                   "(foo |(baz))"))
  (should (string= (vilpy-with "(foo (bar |(baz)))" "2r")
                   "|(baz)"))
  (should (string= (vilpy-with "(foo (bar |(baz)~))" "r")
                   "(foo |(baz)~)"))
  (should (string= (vilpy-with "(foo (bar |(baz)~))" "2r")
                   "|(baz)~"))
  (should (string= (vilpy-with "(a (f~oob|ar) c)" "r") "(a ~oob| c)"))
  (should (string= (vilpy-with "(a (f|oob~ar) c)" "r") "(a |oob~ c)"))
  (should (string= (vilpy-with "(\n     |(foo))" "r") "|(foo)"))
  ;; a bug in `indent-sexp' http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16852
  ;; (should (string= (vilpy-with "(|(\n  progn\n  ))" "r") "|(\n progn\n )"))
  )

(ert-deftest vilpy-raise-some ()
  (should (string= (vilpy-with "(if (and |(pred1) (pred2))\n    (thing1)\n  (thing2))" "R")
                   "(if |(pred1) (pred2)\n    (thing1)\n  (thing2))"))
  (should (string= (vilpy-with "(if (and (pred1) |(pred2))\n    (thing1)\n  (thing2))" "R")
                   "(if |(pred2)\n    (thing1)\n  (thing2))"))
  (should (string= (vilpy-with "(if (and (pred1) (pred2))\n    |(thing1)\n  (thing2))" "R")
                   "|(thing1)\n(thing2)"))
  (should (string= (vilpy-with "(progn\n  |(foo)\n  nil)" "R")
                   "|(foo)\nnil"))
  (should (string= (vilpy-with "(a\n b\n (foo)|\n c)" "R")
                   "a\nb\n(foo)|"))
  (should (string= (vilpy-with "|(foo)" "R")
                   "|(foo)"))
  (should (string= (vilpy-with "(foo)|" "R")
                   "(foo)|")))

(ert-deftest vilpy-convolute ()
  (should (string= (vilpy-with "(when (pred)\n  (let ((x 1))\n    |(foo)\n    (bar)))" "C")
                   "(let ((x 1))\n  (when (pred)\n    |(foo))\n  (bar))"))
  (should (string= (vilpy-with "(when (pred)\n  (let ((x 1))\n    |(foo)\n    (bar)))" "CC")
                   "(when (pred)\n  (let ((x 1))\n    |(foo)\n    (bar)))"))
  (should (string= (vilpy-with "(+ 1 (* 2 ~3|))" "C")
                   "(* 2 (+ 1 ~3|))"))
  (should (string= (vilpy-with "(+ 1 (* 2 |3~))" "C")
                   "(* 2 (+ 1 |3~))"))
  (should (string= (vilpy-with "(asdf\n (when (pred)\n   (let ((x 1))\n     (foo)\n     |(bar))))"
                               "2C")
                   "(when (pred)\n  (let ((x 1))\n    (foo)\n    (asdf\n     |(bar))))"))
  (should (string= (vilpy-with "(takes-two\n  (takes-three\n   |(takes-four 1 2 3 4)\n   second\n   third)\n  other-second)"
                               "C")
                   "(takes-three\n (takes-two\n  |(takes-four 1 2 3 4)\n  other-second)\n second\n third)"))
  (should (string= (vilpy-with "(with-current-buffer buf\n  (let ((beg x)\n        (end y))\n    |(insert \" \")\n    (delete-region beg end)\n    (point)))"
                               "0C")
                   "(let ((beg x)\n      (end y))\n  (with-current-buffer buf\n    |(insert \" \")\n    (delete-region beg end)\n    (point)))")))

(ert-deftest vilpy-join ()
  (should (string= (vilpy-with "(foo) |(bar)" "+")
                   "(foo |bar)"))
  (should (string= (vilpy-with "(foo)| (bar)" "+")
                   "(foo bar)|"))
  (should (string= (vilpy-with "\"a series\"\n \" of st|rings\"" (kbd "M-J"))
                   "\"a series of st|rings\""))
  (should (string= (vilpy-with "\"a series\"\n |\" of strings\"" (kbd "M-J"))
                   "\"a series| of strings\""))
  (should (string= (vilpy-with "\"a series|\"\n \" of strings\"" (kbd "M-J"))
                   "\"a series| of strings\""))
  (should (string= (vilpy-with "\"a series|\"\n \" of strings\"" (kbd "M-J"))
                   "\"a series| of strings\""))
  (should (string= (vilpy-with "|\"a series\"\n \" of strings\"" (kbd "M-J"))
                   "|\"a series of strings\"")))

(ert-deftest vilpy-split ()
  (should (string= (vilpy-with "(foo |bar)" (kbd "M-j"))
                   "(foo)\n|(bar)"))
  (should (string= (vilpy-with "\"five |is right out\"" (kbd "M-j"))
                   "\"five \"\n|\"is right out\""))
  (should (string= (vilpy-with "|\"five is right out\"" (kbd "M-j"))
                   "\n|\"five is right out\""))
  (should (string= (vilpy-with "|\"five is right out\""
                               (kbd "M-f") (kbd "M-j")
                               (kbd "M-f") (kbd "M-j")
                               (kbd "M-f") (kbd "M-j"))
                   "\"five\"\n\" is\"\n\" right\"\n|\" out\""))
  (should (string= (vilpy-with "|\"five is right out\""
                               (kbd "M-f") (kbd "M-j")
                               (kbd "M-f") (kbd "M-j")
                               (kbd "M-f") (kbd "M-j")
                               (kbd "M-J") (kbd "M-J") (kbd "M-J"))
                   "\"five is right| out\""))
  (should (string= (vilpy-with "(defun charge! ()\n  (message \"[mayham]\")\n  |(run-away))" (kbd "M-j"))
                   "(defun charge! ()\n  (message \"[mayham]\"))\n|((run-away))"))
  (should (string= (vilpy-with "(defun charge! ()\n  |(message \"[mayham]\")\n  (run-away))" (kbd "M-j"))
                   "(defun charge! ())\n|((message \"[mayham]\")\n (run-away))"))
  (should (string= (vilpy-with "\"this|\nand that\"" (kbd "M-j"))
                   "\"this\"\n|\"and that\""))
  (should (string= (vilpy-with "(let ((a 1)\n      |(b 2)\n      (c 3))\n  (+ a b c))" (kbd "M-j"))
                   "(let ((a 1))\n  |(let ((b 2)\n        (c 3))\n    (+ a b c)))"))
  (should (string= (vilpy-with "(let ((a 1)\n      (b 2)\n      |(c 3))\n  (+ a b c))" (kbd "M-j"))
                   "(let ((a 1)\n      (b 2))\n  |(let ((c 3))\n    (+ a b c)))"))
  (should (string= (vilpy-with clojure "[1 2 |5]" (kbd "M-j"))
                   "[1 2]\n|[5]"))
  (should (string= (vilpy-with clojure "{:chapter 2 |:verse 9}" (kbd "M-j"))
                   "{:chapter 2}\n|{:verse 9}"))
  (should (string= (vilpy-with "(let ((x 1))\n  (setq y 2|\n        z 3))" (kbd "M-j"))
                   "(let ((x 1))\n  (setq y 2)\n  |(\n   z 3))")))



(ert-deftest vilpy-move-up-region ()
  (should (string= (vilpy-with "(lisp sugar-~free|)" (vilpy-move-up 1))
                   "(lisp |free~-sugar)"))
  (should (string= (vilpy-with "(lisp sugar-~free|)" (progn (vilpy-move-up 1)
                                                            (vilpy-move-up 1)))
                   "(lisp |free~-sugar)"))
  (should (string= (vilpy-with "sugar-~free|-lisp" (vilpy-move-up 1))
                   "|free~-sugar-lisp"))
  (should (string= (vilpy-with "sugar-free-|lisp~" (vilpy-move-up 1))
                   "sugar-~lisp|-free"))
  (should (string= (vilpy-with "sugar-free-|lisp~" (progn (vilpy-move-up 1)
                                                          (vilpy-move-up 1)))
                   "|lisp~-sugar-free")))

(ert-deftest vilpy-move-down-region ()
  (should (string= (vilpy-with "(~sugar|-free lisp)" (vilpy-move-down 1))
                   "(free-~sugar| lisp)"))
  (should (string= (vilpy-with "(|sugar~-free lisp)" (vilpy-move-down 1))
                   "(free-|sugar~ lisp)"))
  (should (string= (vilpy-with "(|sugar~-free lisp)" (progn (vilpy-move-down 1)
                                                            (vilpy-move-down 1)))
                   "(free-|sugar~ lisp)"))
  (should (string= (vilpy-with clojure "(list\n  {&:bar \"foo\"|\n   :foo \"bar\"})" (vilpy-move-down 2))
                   "(list\n  {:foo \"bar\"\n   &:bar \"foo\"|})")))



(ert-deftest vilpy-clone ()
  (should (string= (vilpy-with "(foo)|" (vilpy-clone 1))
                   "(foo)\n(foo)|"))
  (should (string= (vilpy-with "(list\n (foo)|)" (vilpy-clone 1))
                   "(list\n (foo)\n (foo)|)"))
  (should (string= (vilpy-with "|(foo)" (vilpy-clone 1))
                   "|(foo)\n(foo)"))
  (should (string= (vilpy-with "(list\n |(foo))" (vilpy-clone 1))
                   "(list\n |(foo)\n (foo))"))
  (should (string= (vilpy-with "(foo ~(bar)|)" (vilpy-clone 1))
                   "(foo ~(bar)|\n     (bar))"))
  (should (string= (vilpy-with "(foo |(bar)~)" (vilpy-clone 1))
                   "(foo |(bar)~\n     (bar))"))
  (should (string= (vilpy-with "(progn '|(foo))" (vilpy-clone 1))
                   "(progn '|(foo)\n       '(foo))"))
  (should (string= (vilpy-with "(progn '(foo)|)" (vilpy-clone 1))
                   "(progn '(foo)\n       '(foo)|)"))
  (should (string= (vilpy-with "(defun ~function-name| ()\n  (bar))" (vilpy-clone 1))
                   "(defun ~function-name|\n    function-name ()\n  (bar))"))
  (should (string= (vilpy-with "|(+ 1 2)\n;; => 3" (vilpy-clone 1))
                   "(+ 1 2)\n;; => 3\n|(+ 1 2)")))

(ert-deftest vilpy-oneline ()
  (should (string= (vilpy-with "|(defun abc (x)\n  \"def.\"\n  (+ x\n     x\n     x))" (vilpy-oneline))
                   "|(defun abc (x) \"def.\" (+ x x x))"))
  (should (string= (vilpy-with "(defun abc (x)\n  \"def.\"\n  (+ x\n     x\n     x))|" (vilpy-oneline))
                   "(defun abc (x) \"def.\" (+ x x x))|"))
  (should (string= (vilpy-with "|(defun foo ()\n  ;; comment\n  (bar)\n  (baz))" (vilpy-oneline))
                   ";; comment\n|(defun foo () (bar) (baz))"))
  (should (string= (vilpy-with "(progn\n  |;; comment 1\n  ;; comment 2\n  (foo))" (vilpy-oneline))
                   "(progn\n  |;; comment 1 comment 2\n  (foo))"))
  (should (string= (vilpy-with "|(defun test ()\n  ;; comment 1\n  ;; comment 2\n  ;; comment 3\n  (foo))" (vilpy-oneline))
                   ";; comment 1\n;; comment 2\n;; comment 3\n|(defun test () (foo))"))
  (should (string= (vilpy-with "[1\n 2\n 3\n 4\n 5]|" (vilpy-oneline))
                   "[1 2 3 4 5]|")))

(ert-deftest vilpy-multiline ()
  (should (string= (vilpy-with "|(defun abc (x) \"def.\" (+ x x x) (foo) (bar))"
                               (vilpy-multiline))
                   "|(defun abc (x)\n  \"def.\" (+ x x x)\n  (foo)\n  (bar))"))
  (should (string= (vilpy-with "|(defun abc(x)\"def.\"(+ x x x)(foo)(bar))"
                               (vilpy-multiline))
                   "|(defun abc(x)\n  \"def.\"(+ x x x)\n  (foo)\n  (bar))"))
  (should (string= (vilpy-with "|(\"King Arthur\" \"Sir Lancelot\" \"Sir Robin\")"
                               (vilpy-multiline))
                   "|(\"King Arthur\"\n \"Sir Lancelot\"\n \"Sir Robin\")")))

(ert-deftest vilpy-alt-multiline ()
  (let ((vilpy-multiline-threshold nil))
    (should (string= (vilpy-with "|(defvar knights '(lancelot robin galahad bedevere) \"We're knights of the round table...\")" "M")
                     "|(defvar knights '(lancelot\n                  robin\n                  galahad\n                  bedevere)\n  \"We're knights of the round table...\")"))
    (should (string= (vilpy-with "|(defun abc (x) \"def.\" (+ x x x) (foo) (bar))" "M")
                     "|(defun abc (x)\n  \"def.\"\n  (+\n   x\n   x\n   x)\n  (foo)\n  (bar))"))
    (should (string= (vilpy-with "|(defun abc(x)\"def.\"(+ x x x)(foo)(bar))" "M")
                     "|(defun abc (x)\n  \"def.\"\n  (+\n   x\n   x\n   x)\n  (foo)\n  (bar))"))
    (should (string= (vilpy-with "|(\"King Arthur\" \"Sir Lancelot\" \"Sir Robin\")" "M")
                     "|(\"King Arthur\"\n \"Sir Lancelot\"\n \"Sir Robin\")"))
    (should (string= (vilpy-with clojure "|{:king \"Arthur\" :knight \"Lancelot\"}" "M")
                     "|{:king \"Arthur\"\n :knight \"Lancelot\"}"))
    (should (string= (vilpy-with clojure "#|{:king \"Arthur\" :knight \"Lancelot\"}" "M")
                     "#|{:king \"Arthur\"\n  :knight \"Lancelot\"}"))
    (should (string= (vilpy-with clojure "|(let [name \"Launcelot\" quest 'grail color 'blue] (print \"Right. Off you go\"))" "M")
                     "|(let [name \"Launcelot\"\n      quest 'grail\n      color 'blue]\n  (print\n   \"Right. Off you go\"))"))
    (should (string= (vilpy-with clojure "|(when long-enough-line #:car{:name \"a-name\" :type \"a-type\"} #:bike{:name \"a-name\" :type \"a-type\"})" "M")
                     "|(when\n    long-enough-line\n    #:car{:name \"a-name\"\n          :type \"a-type\"}\n    #:bike{:name \"a-name\"\n           :type \"a-type\"})"))
    (should (string= (vilpy-with "(eval-when-compile(require'cl)(require'org))|" "M")
                     "(eval-when-compile\n  (require 'cl)\n  (require 'org))|"))
    (should (string= (vilpy-with "|(defgroup vilpy nil \"List navigation and editing for the Lisp family.\" :group 'bindings :prefix \"vilpy-\")" "M")
                     "|(defgroup vilpy nil\n  \"List navigation and editing for the Lisp family.\"\n  :group 'bindings\n  :prefix \"vilpy-\")"))
    (should (string= (vilpy-with "|(setq expr '(defvar defun defcustom defface))" "M")
                     "|(setq expr\n      '(defvar\n        defun\n        defcustom\n        defface))"))
    (should (string= (vilpy-with "|(setq expr `(defvar defun defcustom defface))" "M")
                     "|(setq expr\n      `(defvar\n           defun\n         defcustom\n         defface))"))
    (should (string= (vilpy-with "|(defun foo (bar) \"Doc.\"(interactive \"p\") (let ((var1 (foo-1 bar 1)) (var2 1) (var-3 (foo (foo bar)))) (baz bar)))" "M")
                     "|(defun foo (bar)\n  \"Doc.\"\n  (interactive \"p\")\n  (let ((var1 (foo-1\n               bar\n               1))\n        (var2 1)\n        (var-3 (foo\n                (foo\n                 bar))))\n    (baz\n     bar)))"))
    (should (string= (vilpy-with "|(if (and (string= ,left \"(\")\n         ;; (= ?\\( (aref (this-command-keys-vector) 0))\n         )\n    (insert \"(\")\n  (insert ,left ,right)\n  (backward-char 1))" "M")
                     "|(if (and (string=\n          ,left\n          \"(\")\n         ;; (= ?\\( (aref (this-command-keys-vector) 0))\n         )\n    (insert\n     \"(\")\n  (insert\n   ,left\n   ,right)\n  (backward-char\n   1))"))
    (should (string= (vilpy-with "|(foo . bar)" "M")
                     "|(foo . bar)"))
    (should (string= (vilpy-with "|(defvar knights-alist '((\"Sir Launcelot\" . \"the Brave\") (\"Sir Galahad\" . \"the Pure\") (\"Sir Robin\" . \"Not-quite-so-brave-as-Sir-Launcelot\")) \"The wise Sir Bedemir was the first to join King Arthur's\\n  knights, but other illustrious names were soon to follow:\")" "M")
                     "|(defvar knights-alist '((\"Sir Launcelot\" . \"the Brave\")\n                        (\"Sir Galahad\" . \"the Pure\")\n                        (\"Sir Robin\" . \"Not-quite-so-brave-as-Sir-Launcelot\"))\n  \"The wise Sir Bedemir was the first to join King Arthur's\n  knights, but other illustrious names were soon to follow:\")"))
    (should (string= (vilpy-with "|(foo\n ;; bar\n bar)" "M")
                     "|(foo\n ;; bar\n bar)"))
    (should (string= (vilpy-with "|(vilpy--multiline-1 '(let let*) t)" "M")
                     "|(vilpy--multiline-1\n '(let\n   let*)\n t)"))
    (should (string= (vilpy-with "|(format\n      #(\"error: [h]: first, [j]: next, [k]: prev, [SPC]: rep.\"\n        8 9 (face hydra-face-red)\n        20 21 (face hydra-face-red)\n        31 32 (face hydra-face-red)\n        42 45 (face hydra-face-red)))" "M")
                     "|(format\n #(\"error: [h]: first, [j]: next, [k]: prev, [SPC]: rep.\"\n   8 9 (face\n        hydra-face-red)\n   20 21 (face\n          hydra-face-red)\n   31 32 (face\n          hydra-face-red)\n   42 45 (face\n          hydra-face-red)))"))
    (should (string= (vilpy-with "[1 2 3 4 5]|" "M")
                     "[1\n 2\n 3\n 4\n 5]|"))))

(ert-deftest vilpy-comment ()
  (should (string= (vilpy-with "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           |(s2)\n           (s3)))))" ";")
                   "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           ;; (s2)\n           |(s3)))))"))
  (should (string= (vilpy-with "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           |(s2)\n           (s3)))))" ";;")
                   "(defun foo ()\n  (let (a b c)\n    (cond |((s1)\n           ;; (s2)\n           ;; (s3)\n           ))))"))
  (should (string-match "(defun foo ()\n  (let (a b c)\n    |(cond ;; ((s1)\n          ;;  ;; (s2)\n          ;;  ;; (s3)\n          ;;  )\n     *)))"
                        (vilpy-with "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           |(s2)\n           (s3)))))" ";;;")))
  (should (string-match "(defun foo ()\n  |(let (a b c)\n    ;; (cond ;; ((s1)\n    ;;       ;;  ;; (s2)\n    ;;       ;;  ;; (s3)\n    ;;       ;;  )\n    ;;   *)\n   *))"
                        (vilpy-with "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           |(s2)\n           (s3)))))" ";;;;")))
  (should (string-match "|(defun foo ()\n  ;; (let (a b c)\n  ;;   ;; (cond ;; ((s1)\n  ;;   ;;       ;;  ;; (s2)\n  ;;   ;;       ;;  ;; (s3)\n  ;;   ;;       ;;  )\n  ;;   ;;  *)\n  ;;   )\n  )"
                        (vilpy-with "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           |(s2)\n           (s3)))))" ";;;;;")))
  (should (string-match "|;; (defun foo ()\n;;   ;; (let (a b c)\n;;   ;;   ;; (cond ;; ((s1)\n;;   ;;   ;;       ;;  ;; (s2)\n;;   ;;   ;;       ;;  ;; (s3)\n;;   ;;   ;;       ;;  )\n;;   ;;   ;;  *)\n;;   ;;   )\n;;   )"
                        (vilpy-with "(defun foo ()\n  (let (a b c)\n    (cond ((s1)\n           |(s2)\n           (s3)))))" ";;;;;;")))
  (should (string= (vilpy-with ";; line| 1\n;; line 2\n (a b c)\n ;; line 3" (vilpy-comment 2))
                   "line| 1\nline 2\n (a b c)\n ;; line 3"))
  (should (string= (vilpy-with ";; line 1\n;; line 2|\n (a b c)\n ;; line 3" (vilpy-comment 2))
                   "line 1\nline 2|\n (a b c)\n ;; line 3"))
  (should (string= (vilpy-with "(|\"foo\"\n (bar)\n baz)" ";")
                   "(;; \"foo\"\n |(bar)\n baz)"))
  (should (string= (vilpy-with "(foo|)" ";")
                   "(foo\n ;; |\n )"))
  (should (string= (vilpy-with "((foo)| (bar))" ";")
                   "((foo)\n ;; |\n (bar))"))
  (should (string= (vilpy-with "((foo) (bar)|)" ";")
                   "((foo) (bar)\n ;; |\n )"))
  (should (string= (vilpy-with "|\n(defun foo ())" ";;;")
                   ";;;###autoload\n|(defun foo ())"))
  (should (string= (vilpy-with "(list\n |foo)" ";")
                   "(list\n |;; foo\n )"))
  (should (string= (vilpy-with "(list\n| foo)" ";")
                   "(list\n |;; foo\n )"))
  (should (string= (vilpy-with "(list\n |foo\n bar)" ";")
                   "(list\n |;; foo\n bar)"))
  (should (string= (vilpy-with "|foo bar\nbaz" ";")
                   "|;; foo bar\nbaz"))
  (should (string= (vilpy-with "(list\n foo\n |1 (2\n    3)\n bar)" ";")
                   "(list\n foo\n |;; 1 (2\n ;;    3)\n bar)"))
  (should (string= (vilpy-with "(defun foo ()|\n  (bar))" ";")
                   "(defun foo ()\n  ;; |\n  (bar))"))
  (should (string= (vilpy-with "(list \\|)" ";")
                   "(list \\;|)"))
  (should (string= (vilpy-with "(list #|)" ";")
                   "(list #;|)"))
  ;; With single semicolons
  (let ((vilpy-comment-use-single-semicolon t))
    (should (string= (vilpy-with "(foo)|" ";")
                     "(foo)                                   ; |"))
    (should (string= (vilpy-with "(foo)                                   ; |" ";")
                     "(foo) ;; |"))
    (should (string= (vilpy-with "((a)| (b))" ";")
                     "((a)                                    ; |\n (b))"))
    (should (string= (vilpy-with "((a)                                    ; |\n (b))" ";")
                     "((a) ;; |\n (b))"))
    (should (string= (vilpy-with "(foo|)" ";")
                     "(foo                                    ; |\n )"))
    (should (string= (vilpy-with "(foo                                    ; |\n )" ";")
                     "(foo ;; |\n )"))))

(ert-deftest vilpy-string-oneline ()
  (should (string= (vilpy-with "\"foo\nb|ar\n\"" (vilpy-string-oneline))
                   "\"foo\\nbar\\n\"|")))

(ert-deftest vilpy-stringify ()
  (should (string= (vilpy-with "(a\n b\n (foo)\n c)|" (vilpy-stringify))
                   "\"(a\n b\n (foo)\n c)|\""))
  (should (string= (vilpy-with "(progn |(1 2 3))" (vilpy-stringify))
                   "(progn \"|(1 2 3)\")"))
  (should (string= (vilpy-with "(foo |(bar #\\x \"baz \\\\ quux\") zot)" (vilpy-stringify))
                   "(foo \"|(bar #\\\\x \\\"baz \\\\\\\\ quux\\\")\" zot)"))
  (should (string= (vilpy-with "(list ~one|\n      two\n      five)" (vilpy-stringify))
                   "(list ~\"one\"|\n      two\n      five)"))
  (should (string= (vilpy-with "(list ~one|\n      two\n      five)" (progn (vilpy-stringify)
                                                                            (vilpy-down 1)
                                                                            (vilpy-stringify)
                                                                            (vilpy-down 1)
                                                                            (vilpy-stringify)))
                   "(list \"one\"\n      \"two\"\n      ~\"five\"|)")))

(ert-deftest vilpy-teleport ()
  ;; should be able to cancel
  (should (string= (vilpy-with "(a |(b))"
                               (execute-kbd-macro (kbd "t ESC")))
                   "(a |(b))"))
  (should (string= (vilpy-with "(a (b)|)"
                               (execute-kbd-macro (kbd "t ESC")))
                   "(a (b)|)"))
  (should (string= (vilpy-with "((a) ~b|)"
                               (execute-kbd-macro (kbd "t ESC")))
                   "((a) ~b|)"))
  (should (string= (vilpy-with "(let ((x))\n  '|(foo bar)\n  (baz))"
                               (execute-kbd-macro (kbd "tc ESC")))
                   "(let ((x '|(foo bar)))\n  (baz))"))

  (should (string= (vilpy-with "((a) |b~)"
                               (execute-kbd-macro (kbd "t ESC")))
                   "((a) |b~)")))

(ert-deftest vilpy-eval ()
  (should (= 4 (vilpy-with-v el "(+ 2 2)|" (vilpy-eval))))
  (should (= 4 (vilpy-with-v el "|(+ 2 2)" (vilpy-eval))))
  (should (= 4 (vilpy-with-v el "~(+ 2 2)|" (vilpy-eval))))
  (should (= 4 (vilpy-with-v el "(+ ~2 2)|" (vilpy-eval)))))

(ert-deftest vilpy-eval-defun ()
  (should (= 5 (vilpy-with-v el "(+ 1 (+ 2 2))|" (vilpy-eval-defun))))
  (should (= 5 (vilpy-with-v el "(+ 1 (+ 2 2)|)" (vilpy-eval-defun))))
  (should (= 5 (vilpy-with-v el "(+ 1 |(+ 2 2))" (vilpy-eval-defun)))))

(ert-deftest vilpy-quotes ()
  (should (string= (vilpy-with "(frob grovel |full lexical)" "\"")
                   "(frob grovel \"|\" full lexical)"))
  (should (string= (vilpy-with "(foo \"bar |baz\" quux)" "\"")
                   "(foo \"bar \\\"|\\\"baz\" quux)"))
  (should (string= (vilpy-with "\"(fo|o)\"" (vilpy-quotes 1))
                   "(fo|o)"))
  (should (string= (vilpy-with "\"(foo)\"\n|(bar)" "mk2\"")
                   "~(foo)|\n(bar)"))
  (should (string= (vilpy-with "(message \"say |hi~\")" "\"")
                   "(message \"say |\\\"hi\\\"~\")"))
  (should (string= (vilpy-with "|\"foo\"" "\"")
                   "\"|\" \"foo\""))
  (should (string= (vilpy-with "(list exp|erts)" (kbd "C-u") (kbd "\""))
                   "(list \"exp|erts\")"))
  (should (string= (vilpy-with "(list \"exp|erts\")"
                               (kbd "C-u") (kbd "\""))
                   "(list exp|erts)"))
  (should (string= (vilpy-with "(list ~\"experts\"|)" "\"")
                   "(list ~\"\\\"experts\\\"\"|)"))
  (should (string= (vilpy-with "(list |\"experts\"~)" "\"")
                   "(list |\"\\\"experts\\\"\"~)")))

(ert-deftest vilpy--prettify-1 ()
  (should (string= (vilpy-with "|(foo (bar)baz)" (vilpy--prettify-1))
                   "|(foo (bar) baz)"))
  (should (string= (vilpy-with "(foo (bar)baz)|" (vilpy--prettify-1))
                   "(foo (bar) baz)|"))
  (should (string= (vilpy-with "|(bar\n  foo )" (vilpy--prettify-1))
                   "|(bar\n foo)"))
  (should (string= (vilpy-with "|(foo \")\")" (vilpy--prettify-1))
                   "|(foo \")\")"))
  (should (string= (vilpy-with "|(foo     \n bar)" (vilpy--prettify-1))
                   "|(foo\n bar)"))
  (should (string= (vilpy-with "|(require' foo)" (vilpy--prettify-1))
                   "|(require 'foo)"))
  (should (string= (vilpy-with clojure
                               "|(expr ~(expr) ~'expr '~(expr) ~'(expr) ~@(expr))"
                               (vilpy--prettify-1))
                   "|(expr ~(expr) ~'expr '~(expr) ~'(expr) ~@(expr))")))

(ert-deftest vilpy-open-parens-below ()
  (should (string= (vilpy-with "|(foo)" (vilpy-open-parens-below))
                   "(foo)\n(|)"))
  (should (string= (vilpy-with "(foo)|" (vilpy-open-parens-below))
                   "(foo)\n(|)"))
  (should (string= (vilpy-with "(foo\n|(bar)\n(baz)" (vilpy-open-parens-below))
                   "(foo\n(bar)\n(|)\n(baz)")))

(ert-deftest vilpy-open-parens-above ()
  (let ((result (vilpy-with "(foo\n|(bar))" (vilpy-open-parens-above)))
        (expected "(foo\n (|)\n(bar))"))
    (print "result")
    (print result)
    (print "expected")
    (print expected)
    (should (string= (vilpy-with "(foo\n|(bar))" (vilpy-open-parens-above))
                     "(foo\n (|)\n(bar))"))
    (should (string= (vilpy-with "(foo\n(bar)|)" (vilpy-open-parens-above))
                     "(foo\n (|)\n(bar))"))))

(ert-deftest vilpy--sexp-normalize ()
  (should (equal
           (vilpy--sexp-normalize
            '(progn
              (ly-raw comment "foo")
              (ly-raw newline)))
           '(progn
             (ly-raw comment "foo")
             (ly-raw newline)))))

(ert-deftest vilpy--remove-gaps ()
  (should (string= (vilpy-with "((a) |(c))" (vilpy--remove-gaps))
                   "((a) |(c))")))

(ert-deftest vilpy-mark ()
  (should (string= (vilpy-with "|;; abc\n;; def\n;; ghi" (kbd "C-M-,"))
                   "~;; abc\n;; def\n;; ghi|"))
  (should (string= (vilpy-with ";; a|bc\n;; def\n;; ghi" (kbd "C-M-,"))
                   "~;; abc\n;; def\n;; ghi|"))
  (should (string= (vilpy-with ";; abc\n|;; def\n;; ghi" (kbd "C-M-,"))
                   "~;; abc\n;; def\n;; ghi|"))
  (should (string= (vilpy-with ";; abc\n;; def\n;; ghi|" (kbd "C-M-,"))
                   "~;; abc\n;; def\n;; ghi|")))

(ert-deftest vilpy-mark-symbol ()
  (should (string= (vilpy-with "(foo |\"bar\")" (kbd "M-m"))
                   "(foo ~\"bar\"|)"))
  (should (string= (vilpy-with "(foo \"bar|\")" (kbd "M-m"))
                   "(foo ~\"bar\"|)"))
  (should (string= (vilpy-with "(mapc #'ta|unt knights)" (kbd "M-m"))
                   "(mapc ~#'taunt| knights)"))
  (should (string= (vilpy-with "|(foo)" (kbd "M-m"))
                   "(~foo|)"))
  (should (string= (vilpy-with "(foo|)" (kbd "M-m"))
                   "(~foo|)"))
  (should (string= (vilpy-with "|[foo]" (kbd "M-m"))
                   "[~foo|]"))
  (should (string= (vilpy-with clojure "|{foo}" (kbd "M-m"))
                   "{&foo|}"))
  (should (string= (vilpy-with "(foo \"|bar\")" (kbd "M-m"))
                   "(foo \"~bar|\")"))
  (should (string= (vilpy-with "\"See `plu|mage'.\"" (kbd "M-m"))
                   "\"See ~`plumage'|.\""))
  (should (string= (vilpy-with ";; See `plu|mage'." (kbd "M-m"))
                   ";; See ~`plumage'|."))
  (should (string= (vilpy-with "(list {:key args})|" (kbd "M-m"))
                   "(list {:key |args~})"))
  (should (string= (vilpy-with "|[\"string with spaces\"]" (kbd "M-m"))
                   "[\"~string| with spaces\"]"))
  (should (string= (vilpy-with clojure "|{\"string with spaces\"}" (kbd "M-m"))
                   "{\"&string| with spaces\"}"))
  (should (string= (vilpy-with "(defn fname \"string\"| )" (kbd "M-m"))
                   "(defn fname ~\"string\"| )"))
  (should (string= (vilpy-with "(defn fname \"string\"| [] (symbols in a form))" (kbd "M-m"))
                   "(defn fname ~\"string\"| [] (symbols in a form))"))
  (should (string= (vilpy-with "|(\"a\")" (kbd "M-m"))
                   "(\"~a|\")"))
  (should (string= (vilpy-with "(\"string\"  |)" (kbd "M-m"))
                   "(~\"string\"|  )"))
  (should (string= (vilpy-with "(:keyword| (form))" (kbd "M-m"))
                   "(~:keyword| (form))")))

(ert-deftest vilpy--read ()
  (should (equal (vilpy--read "(mu4e-mail)")
                 '(mu4e-mail)))
  (should (equal (vilpy--read "(progn
                                 #'foo
                                 (ly-raw function foo)
                                 (function foo)
                                 \"#'bar\"
                                 \"(ly-raw)\"
                                 #'bar)")
                 '(progn (ly-raw newline)
                   (ly-raw function foo)
                   (ly-raw newline)
                   (ly-raw raw function foo)
                   (ly-raw newline)
                   #'foo
                   (ly-raw newline)
                   (ly-raw string "\"#'bar\"")
                   (ly-raw newline)
                   (ly-raw string "\"(ly-raw)\"")
                   (ly-raw newline)
                   (ly-raw function bar))))
  (should (equal (vilpy--read "(helm :sources
                                     `((name . \"this defun\")
                                       (match-strict .
                                                     (lambda (x)))))")
                 '(helm :sources (ly-raw newline)
                   (ly-raw \` ((name (ly-raw dot)
                                     (ly-raw string "\"this defun\""))
                               (ly-raw newline)
                               (match-strict (ly-raw dot)
                                             (ly-raw newline)
                                             (lambda (x))))))))
  ;; (should (equal
  ;;          (vilpy-with clojure
  ;;           "|(fn* [p1__7041#] (+ 1 p1__7041#))" "i")
  ;;          "|(fn* [p1__7041#] (+ 1 p1__7041#))"))
  (should (equal
           (vilpy-with clojure
                       "|(s/? ::spec)" (vilpy-tab))
           "|(s/? ::spec)"))
  (should (equal
           (vilpy--prin1-to-string
            (vilpy--read "#<marker (moves after insertion) at 280 in *Customize Group: Vilpy Faces*>")
            0 'emacs-lisp-mode)
           "#<marker (moves after insertion) at 280 in *Customize Group: Vilpy Faces*>"))
  (should (equal
           (vilpy--prin1-to-string
            (vilpy--read "(1 2 3 1 2 . #2)")
            0 'emacs-lisp-mode)
           "(1 2 3 1 2 . #2)"))
  (let ((major-mode 'emacs-lisp-mode))
    (should (equal (vilpy--read "(progn `(lambda () ,(+ 2 2) ,@(number-sequence 1 3)))")
                   '(progn
                     (ly-raw \` (lambda (ly-raw empty) (ly-raw \, (+ 2 2)) (ly-raw comma-splice (number-sequence 1 3))))))))
  (should (equal
           (vilpy--read "#(\"]\" 0 1 (face hydra-face-red))")
           '(ly-raw clojure-lambda ((ly-raw string "\"]\"")
                                    0 1 (face hydra-face-red)))))
  (should (equal
           (vilpy--read "#p\"path\"")
           '(ly-raw lisp-macro "#p\"path\"")))
  (should (equal
           (vilpy--read "#m(foo bar)")
           '(ly-raw lisp-macro "#m(foo bar)")))
  (should (equal
           (vilpy--read ",(or body)")
           '(ly-raw \, (or body))))
  (should (equal (vilpy-with-v clj
                     "|(list \\a \\b \\. \\, \\c \\space \\tab \\u03A9)"
                   (vilpy--read (vilpy--string-dwim)))
                 '((ly-raw clojure-symbol "list")
                   (ly-raw clojure-char "\\a")
                   (ly-raw clojure-char "\\b")
                   (ly-raw clojure-char "\\.")
                   (ly-raw clojure-char "\\,")
                   (ly-raw clojure-char "\\c")
                   (ly-raw clojure-char "\\space")
                   (ly-raw clojure-char "\\tab")
                   (ly-raw clojure-char "\\u03A9"))))
  (should (equal (vilpy-with-v clj
                     "|(str \\! \\@ \\# \\$ \\% \\& \\*)"
                   (vilpy--read (vilpy--string-dwim)))
                 '((ly-raw clojure-symbol "str")
                   (ly-raw clojure-char "\\!")
                   (ly-raw clojure-char "\\@")
                   (ly-raw clojure-char "\\#")
                   (ly-raw clojure-char "\\$")
                   (ly-raw clojure-char "\\%")
                   (ly-raw clojure-char "\\&")
                   (ly-raw clojure-char "\\*"))))
  (should (equal (vilpy-with-v clj
                     "|(foo \"#_(bar)\")"
                   (vilpy--read (vilpy--string-dwim)))
                 '((ly-raw clojure-symbol "foo")
                   (ly-raw string "\"#_(bar)\""))))
  (should (equal (vilpy-with-v clj
                     "|{:a {:nested \"map\"}}"
                   (vilpy--read (vilpy--string-dwim)))
                 '(ly-raw clojure-map
                   ((ly-raw clojure-symbol ":a")
                    (ly-raw clojure-map
                     ((ly-raw clojure-symbol ":nested")
                      (ly-raw string "\"map\"")))))))
  (should (equal (vilpy-with-v clj
                     "|#(swap! foo assoc :bar (. % .-value))"
                   (vilpy--read (vilpy--string-dwim)))
                 '(ly-raw clojure-lambda
                   ((ly-raw clojure-symbol "swap!")
                    (ly-raw clojure-symbol "foo")
                    (ly-raw clojure-symbol "assoc")
                    (ly-raw clojure-symbol ":bar")
                    ((ly-raw clojure-symbol ".") % (ly-raw clojure-symbol ".-value"))))))
  (should (equal (vilpy--read ":.name")
                 '(ly-raw clojure-keyword ":.name"))))

(ert-deftest vilpy-tick ()
  (should (string= (vilpy-with "|" "'") "'|"))
  (should (string= (vilpy-with "|" "`") "`|"))
  (should (string= (vilpy-with "~\"right\"|" "'")
                   "~right|"))
  (should (string= (vilpy-with "|\"right\"~" "'")
                   "|right~"))
  (should (string= (vilpy-with clojure "foo|" "'")
                   "foo '|"))
  (should (string= (vilpy-with clojure "foo|" " ~'")
                   "foo ~'|"))
  (should (string= (vilpy-with "(setq foo ~bar|)" "'")
                   "(setq foo ~'bar|)"))
  (should (string= (vilpy-with "(setq foo ~'bar|)" "'")
                   "(setq foo ~bar|)")))

(ert-deftest vilpy-underscore ()
  (should (string= (vilpy-with clojure "(list |[1 2 3]\n      [3 4 5])" "_")
                   "(list #_|[1 2 3]\n      [3 4 5])"))
  (should (string= (vilpy-with clojure "(list #_|[1 2 3]\n      [3 4 5])" "_")
                   "(list |[1 2 3]\n      [3 4 5])"))
  (should (string= (vilpy-with clojure "(list [1 2 3]|\n      [3 4 5])" "_")
                   "(list #_[1 2 3]|\n      [3 4 5])"))
  (should (string= (vilpy-with clojure "(list #_[1 2 3]|\n      [3 4 5])" "_")
                   "(list [1 2 3]|\n      [3 4 5])")))

(ert-deftest vilpy-parens ()
  (should (string= (vilpy-with "'|(foo bar)" "1(")
                   "(| '(foo bar))"))
  (should (string= (vilpy-with "'(foo bar)|" "1(")
                   "(| '(foo bar))"))
  (should (string= (vilpy-with "\"a regex \\\\|\"" "(")
                   "\"a regex \\\\(|\\\\)\""))
  (let (vilpy-parens-only-left-in-string-or-comment)
    (should (string= (vilpy-with "\"|\"" "(")
                     "\"(|)\""))
    (should (string= (vilpy-with ";; |" "(")
                     ";; (|)")))
  (should (string= (vilpy-with "~(foo) (bar)|" "(")
                   "(| (foo) (bar))"))
  (should (string= (vilpy-with "~foo (bar)|" "(")
                   "|(foo (bar))"))
  (should (string= (vilpy-with "~foo (bar)|" "1(")
                   "(| foo (bar))"))
  (should (string= (vilpy-with "(foo bar|)" "1(")
                   "(foo (| bar))"))
  (should (string= (vilpy-with "(foo bar| )" "1(")
                   "(foo (| bar) )"))
  (should (string= (vilpy-with "{|}" "(")
                   "{(|)}"))
  (should (string= (vilpy-with "(defun foo (x)\n  |)" "1(")
                   "(defun foo (x)\n  (|))"))
  ;; test space-unless behavior
  (should (string= (vilpy-with "a|" "(")
                   "a (|)"))
  (should (string= (vilpy-with ",@|" "(")
                   ",@(|)"))
  (should (string= (vilpy-with clojure "#|" "(")
                   "#(|)"))
  (should (string= (vilpy-with clojure "#?@|" "(")
                   "#?@(|)"))
  (should (string= (vilpy-with clojure "(map #|(+ % 1) '(1 2 3))" "2(")
                   "(map #(| (+ % 1)) '(1 2 3))")))

(ert-deftest vilpy-braces ()
  (should (string= (vilpy-with "\"a regex \\\\|\"" "{")
                   "\"a regex \\\\{|\\\\}\""))
  (should (string= (vilpy-with "\"a string |" "{")
                   "\"a string {|}"))
  ;; test space-unless behavior
  (should (string= (vilpy-with clojure "`|" "{")
                   "`{|}"))
  (should (string= (vilpy-with clojure "^|" "{")
                   "^{|}"))
  (should (string= (vilpy-with clojure "#my.record|" "{")
                   "#my.record{|}"))
  (should (string= (vilpy-with clojure "symbol|" "{")
                   "symbol {|}")))

(ert-deftest vilpy-up-slurp ()
  (should (string= (vilpy-with "(progn\n  (foo))\n|(bar)" (vilpy-up-slurp))
                   "(progn\n  (foo)\n  |(bar))"))
  (should (string= (vilpy-with "(progn\n  (foo))\n(bar)|" (vilpy-up-slurp))
                   "(progn\n  (foo)\n  (bar)|)"))
  (should (string= (vilpy-with "(progn\n  (foo))\n~(bar)|" (vilpy-up-slurp))
                   "(progn\n  (foo)\n  ~(bar)|)"))
  (should (string= (vilpy-with "(progn\n  (foo))\n|(bar)~" (vilpy-up-slurp))
                   "(progn\n  (foo)\n  |(bar)~)"))
  (should (string= (vilpy-with "(progn\n  (foo))\n|(bar)\n(baz)~" (vilpy-up-slurp))
                   "(progn\n  (foo)\n  |(bar)\n  (baz)~)"))
  (should (string= (vilpy-with "[foo] |(bar)" (vilpy-up-slurp))
                   "[foo |(bar)]"))
  (should (string= (vilpy-with "(progn\n  (foo))\n~(bar)\n(baz)|" (vilpy-up-slurp))
                   "(progn\n  (foo)\n  ~(bar)\n  (baz)|)"))
  (should (string= (vilpy-with "(let ((a (1+))))\n|" (vilpy-up-slurp))
                   "(let ((a (1+)))\n  |)"))
  (should (string= (vilpy-with "(let ((a (1+)))\n  |)" (vilpy-up-slurp))
                   "(let ((a (1+))\n      |))"))
  (should (string= (vilpy-with "(let ((a (1+))\n      |))" (vilpy-up-slurp))
                   "(let ((a (1+)\n        |)))"))
  (should (string= (vilpy-with "(let ((a (1+)\n        |)))" (vilpy-up-slurp))
                   "(let ((a (1+\n          |))))"))
  ;; no change should be made here
  (should (string= (vilpy-with "(let ((a (1+\n          |))))" (vilpy-up-slurp))
                   "(let ((a (1+\n          |))))")))

(ert-deftest vilpy-tab ()
  (should (string= (vilpy-with "|(defun test?  (x) x)" (vilpy-tab))
                   "|(defun test? (x) x)"))
  (should (string= (vilpy-with "|(list '{foobar)" (vilpy-tab))
                   "|(list '{foobar)"))
  (should (string= (vilpy-with "|(setq x '(\n          \n          ))" (vilpy-tab))
                   "|(setq x '())"))
  (should (string= (vilpy-with "|(eq (char-before) ?\\()" (vilpy-tab))
                   "|(eq (char-before) ?\\()"))
  (should (string= (vilpy-with "`|[1  2  3]" (vilpy-tab))
                   "`|[1 2 3]"))
  (should (string= (vilpy-with "   |(defun)" (vilpy-tab))
                   "|(defun)"))
  (should (string= (vilpy-with "|;; comment 1\n;; comment 2" (vilpy-tab))
                   "|;; comment 1\n;; comment 2"))
  (should (string= (vilpy-with "|(list \"\\\"\")" (vilpy-tab))
                   "|(list \"\\\"\")"))
  (should (string= (vilpy-with "|(modify-syntax-entry ?' \"\\\"\" table)" (vilpy-tab))
                   "|(modify-syntax-entry ?' \"\\\"\" table)"))
  (should (string= (vilpy-with clojure "|(let [:foo :bar\n:bax :xum])" (vilpy-tab))
                   "|(let [:foo :bar\n      :bax :xum])"))
  (should (equal (vilpy-with "|(pcase :bar\n    (`,pat pat))" (vilpy-tab))
                 "|(pcase :bar\n  (`,pat pat))"))
  (should (equal (vilpy-with "'|(27 ?\\C-g)" (vilpy-tab))
                 "'|(27 ?\\C-g)")))

(defun vilpy-test-normalize ()
  (interactive)
  (goto-char (point-min))
  (catch 'break
    (let ((pt (point)))
      (while (not (buffer-modified-p))
        (setq pt (max pt (point)))
        (vilpy-down 1)
        (if (< (point) pt)
            (throw 'break nil))
        (vilpy-tab)))))

(ert-deftest vilpy-ace-subword ()
  (should (string= (vilpy-with "|foo-bar-baz~" (vilpy-ace-subword 1))
                   "~foo|-bar-baz")))

(ert-deftest vilpy-mark-list ()
  (should (string= (vilpy-with "|;; foo\n(bar)" (vilpy-mark-list 1))
                   "~;; foo|\n(bar)"))
  (should (string= (vilpy-with "~;; foo|\n(bar)" (vilpy-mark-list 1))
                   "|;; foo\n(bar)"))
  (should (string= (vilpy-with "~(foo bar)|" (vilpy-mark-list 0))
                   "(~foo bar|)"))
  (should (string= (vilpy-with "(progn ,@(cdr re)|)" (vilpy-mark-list 1))
                   "(progn |,@(cdr re)~)"))
  (should (string= (vilpy-with "(progn ,@(cdr re)|)" (progn (vilpy-mark-list 1)
                                                            (vilpy-mark-list 1)))
                   "(progn ,@|(cdr re))"))
  (should (string= (vilpy-with "(progn ,@|(cdr re))" (vilpy-mark-list 1))
                   "(progn ~,@(cdr re)|)"))
  (should (string= (vilpy-with "(progn ,@|(cdr re))" (progn (vilpy-mark-list 1)
                                                            (vilpy-mark-list 1)))
                   "(progn ,@(cdr re)|)"))
  (should (string= (vilpy-with clojure "#|{:bar 'baz}" (vilpy-mark-list 0))
                   "#{&:bar 'baz|}"))
  (should (string= (vilpy-with "#2A|((a b) (0 1))" (vilpy-mark-list 1))
                   "~#2A((a b) (0 1))|")))

(ert-deftest vilpy-mark-car ()
  (should (string= (vilpy-with "|\"foo\"~" (vilpy-tab))
                   "\"~foo|\""))
  (should (string= (vilpy-with "~'(\n  foo)|" (vilpy-tab))
                   "'(\n  ~foo|)"))
  (should (string= (vilpy-with "|'(\n  foo)~" (vilpy-tab))
                   "'(\n  ~foo|)"))
  (should (string= (vilpy-with
                    "|(add-to-list 'auto-mode-alist '(\"\\\\.cache\\\\'\" . emacs-lisp-mode))"
                    (progn (vilpy-mark-list 1)
                           (vilpy-tab)))
                   "(~add-to-list| 'auto-mode-alist '(\"\\\\.cache\\\\'\" . emacs-lisp-mode))"))
  (should (string= (vilpy-with
                    "|(add-to-list 'auto-mode-alist '(\"\\\\.cache\\\\'\" . emacs-lisp-mode))"
                    (progn (vilpy-mark-list 1)
                           (vilpy-tab)
                           (vilpy-down 1)
                           (vilpy-tab)))
                   "(add-to-list '~auto-mode-alist| '(\"\\\\.cache\\\\'\" . emacs-lisp-mode))"))
  (should (string= (vilpy-with "\"See ~`plumage'|.\"" (vilpy-tab))
                   "\"See `~plumage|'.\""))
  (should (string= (vilpy-with "(list ~\"one\" \"two\"|)" (vilpy-tab))
                   "(list ~\"one\"| \"two\")")))

(ert-deftest vilpy-beginning-of-defun ()
  (should (string= (vilpy-with "(baz)\n(foo (b|ar))"
                               (vilpy-beginning-of-defun))
                   "(baz)\n|(foo (bar))"))
  (should (string= (vilpy-with "(baz)\n(foo |(bar))" (vilpy-beginning-of-defun))
                   "(baz)\n|(foo (bar))"))
  ;; (should (string= (vilpy-with "(baz)\n(foo |(bar))" "AA")
  ;;                  "(baz)\n(foo |(bar))"))
  (should (string= (vilpy-with "(baz)\n(foo (|bar~))" (vilpy-beginning-of-defun))
                   "(baz)\n|(foo (bar))"))
  ;; (should (string= (vilpy-with "(baz)\n(foo (|bar~))" "AA")
  ;;                  "(baz)\n(foo (|bar~))"))
  )

(ert-deftest vilpy-space ()
  (should (string= (vilpy-with "(|foo" " ")
                   "(| foo"))
  (should (string= (vilpy-with "(| foo)" " ")
                   "(|foo)"))
  (should (string= (vilpy-with "|(foo bar)" "2 ")
                   "(| foo bar)"))
  (should (string= (vilpy-with "(foo bar)|" "2 ")
                   "(foo bar |)"))
  (should (string= (vilpy-with "|(foo bar)" "3 ")
                   "(foo bar |)"))
  (should (string= (vilpy-with "(foo bar)|" "3 ")
                   "(| foo bar)"))
  (should (string= (vilpy-with "(foo (bar)|)" " ")
                   "(foo (bar) |)"))
  (should (string= (vilpy-with "(foo (bar)|)" "4 ")
                   "(foo (bar\n      |))"))
  (should (string= (vilpy-with "(foo |(bar))" "4 ")
                   "(foo (bar\n      |))"))
  (should (string= (vilpy-with "|(progn\n  (foo)\n  )" "4 ")
                   "(progn\n  (foo)\n  |)"))
  (should (string= (vilpy-with "(progn\n  (foo)\n  )|" "4 ")
                   "(progn\n  (foo)\n  |)"))
  (should (string= (vilpy-with "[|()]" " ")
                   "[| ()]"))
  (should (string= (vilpy-with "{|()}" " ")
                   "{| ()}"))
  (should (string= (vilpy-with "|(cdr )" "3 ")
                   "(cdr |)"))
  (should (string= (vilpy-with "foo\"[|]\"" " ")
                   "foo\"[ |]\""))
  (should (string= (vilpy-with clojure "(list \\(|)" " ")
                   "(list \\( |)")))

(ert-deftest vilpy-kill-word ()
  (should (string= (vilpy-with "|  (require 'cl)" (kbd "M-d"))
                   "  (| 'cl)"))
  (should (string= (vilpy-with "|  \"(require 'cl)\"" (kbd "M-d"))
                   "  \"(| 'cl)\""))
  (should (string= (vilpy-with "\"(require |'cl)\"" (kbd "M-d"))
                   "\"(require '|)\""))
  (should (string= (vilpy-with "\"(require '|)\"" (kbd "M-d"))
                   "\"(require ')\"|"))
  (should (string= (vilpy-with "(foo \"|bar\")" (kbd "M-d"))
                   "(foo \"|\")"))
  (should (string= (vilpy-with "(foo |\"bar\")" (kbd "M-d"))
                   "(foo \"|\")"))
  (should (string= (vilpy-with "\"(require |'cl)\"" (vilpy-kill-word -1))
                   "\"(|'cl)\""))
  (should (string= (vilpy-with "(defun |test)" (kbd "M-d"))
                   "(defun |)"))
  (should (string= (vilpy-with "\"this is a |test\"" (kbd "M-d"))
                   "\"this is a |\"")))

(ert-deftest vilpy-backward-kill-word ()
  (should (string= (vilpy-with "(require 'cl)|" (kbd "M-DEL"))
                   "(require '|)"))
  (should (string= (vilpy-with "(require 'cl)|" (kbd "M-DEL") (kbd "C-y"))
                   "(require 'cl|)"))
  (should (string= (vilpy-with "(eval-after-load |)" (kbd "M-DEL"))
                   "(eval-after-|)"))
  (should (string= (vilpy-with "(eval-after-load |)"
                               (kbd "M-DEL") (kbd "M-DEL"))
                   "(eval-|)"))
  (should (string= (vilpy-with "(eval-after-load |)"
                               (kbd "M-DEL") (kbd "M-DEL") (kbd "C-y"))
                   "(eval-after-load |)"))
  (should (string= (vilpy-with "(eval-after-load \"foo\")|" (kbd "M-DEL"))
                   "(eval-after-load \"|\")"))
  (should (string= (vilpy-with "(eval-after-load \"|\")" (kbd "M-DEL"))
                   "(eval-after-| \"\")"))
  (should (string= (vilpy-with "\"foo bar   \"|" (kbd "M-DEL"))
                   "\"foo |\""))
  (should (string= (vilpy-with "\"\\nfoo\"|" (kbd "M-DEL"))
                   "\"|\""))
  (should (string= (vilpy-with "\"\\nfoo\"|" (kbd "M-DEL"))
                   "\"|\""))
  (should (string= (vilpy-with "\"Five is right| out\"" (kbd "M-DEL"))
                   "\"Five is | out\""))
  (should (string= (vilpy-with "\"Five is right| out\""
                               (kbd "M-DEL")
                               (kbd "M-DEL"))
                   "\"Five | out\""))
  (should (string= (vilpy-with "(nil nil |:color blue)" (kbd "M-DEL"))
                   "(nil |:color blue)"))
  (should (string= (vilpy-with "\"\\n |\"" (kbd "M-DEL"))
                   "\"|\"")))

(ert-deftest vilpy-hash ()
  (should (string= (vilpy-with clojure "foo|" "#")
                   "foo #|"))
  (should (string= (vilpy-with clojure "foo|" "##")
                   "foo#|")))

(ert-deftest vilpy-newline-and-indent-plain ()
  (message "vilpy-newline-and-indent-plain")
  (should (string= (vilpy-with "(mapc #'|say-ni\n      knights)" (kbd "RET"))
                   "(mapc\n #'|say-ni\n knights)"))
  (should (string= (vilpy-with "(mapc #'|say-ni\n      knights)" (kbd "C-j"))
                   "(mapc\n #'|say-ni\n knights)")))

(ert-deftest vilpy-knight-down ()
  (should (string= (vilpy-with "|(defun foo ()\n  (bar)\n  (baz))"
                               (vilpy-knight-down))
                   "(defun foo ()\n  |(bar)\n  (baz))")))

(ert-deftest vilpy-knight-up ()
  (should (string= (vilpy-with "(defun foo ()\n  |(bar)\n  (baz))"
                               (vilpy-knight-up))
                   "|(defun foo ()\n  (bar)\n  (baz))")))

(ert-deftest vilpy-ace-char ()
  (should (string= (vilpy-with "|(cons 'norwegian 'blue)"
                               (execute-kbd-macro (kbd "Qob")))
                   "(cons 'n|orwegian 'blue)")))

(ert-deftest vilpy-ace-paren ()
  (should (string= (vilpy-with "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"
                               (execute-kbd-macro (kbd "qb")))
                   "(progn |(setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"))
  (should (string= (vilpy-with "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"
                               (execute-kbd-macro (kbd "qc")))
                   "(progn (setq type 'norwegian-blue)\n       |(setq plumage-type 'lovely))"))
  (should (string= (vilpy-with "(progn (setq type 'norwegian-blue)\n       |(setq plumage-type 'lovely))"
                               (execute-kbd-macro (kbd "qa")))
                   "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))")))

(ert-deftest vilpy-ace-symbol ()
  (let ((avy-keys-alist nil))
    (should (string= (vilpy-with "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"
                                 (execute-kbd-macro (kbd "fb")))
                     "(progn (~setq| type 'norwegian-blue)\n       (setq plumage-type 'lovely))"))
    (should (string= (vilpy-with "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"
                                 (execute-kbd-macro (kbd "fc")))
                     "(progn (setq ~type| 'norwegian-blue)\n       (setq plumage-type 'lovely))"))
    (should (string= (vilpy-with "(progn (setq type 'norwegian-blue)\n       |(setq plumage-type 'lovely))"
                                 (execute-kbd-macro (kbd "fa")))
                     "(progn (setq type 'norwegian-blue)\n       (~setq| plumage-type 'lovely))"))))

(ert-deftest vilpy-ace-subword ()
  (should (string= (vilpy-with "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"
                               (execute-kbd-macro (kbd "-g")))
                   "(progn (setq type 'norwegian-blue)\n       (setq |plumage~-type 'lovely))"))
  (should (string= (vilpy-with "|(progn (setq type 'norwegian-blue)\n       (setq plumage-type 'lovely))"
                               (execute-kbd-macro (kbd "-e")))
                   "(progn (setq type 'norwegian-|blue~)\n       (setq plumage-type 'lovely))"))
  ;; should be able to cancel
  (should (string= (vilpy-with "|(a b c)"
                               (execute-kbd-macro (kbd "- ESC")))
                   "|(a b c)")))

(ert-deftest vilpy-paste ()
  (should (string= (vilpy-with "|(a witch)"
                               (progn (vilpy-copy)
                                      (vilpy-paste 2)))
                   "(a (a witch)| witch)"))
  (should (string= (vilpy-with "|(a witch)"
                               (progn (vilpy-copy)
                                      (vilpy-paste 3)))
                   "(a witch (a witch)|)"))
  (should (string= (vilpy-with "(progn\n  |(one)\n  (two)\n  (three))"
                               (progn (vilpy-copy)
                                      (vilpy-down 1)
                                      (vilpy-paste 1)))
                   "(progn\n  (one)\n  (one)|\n  (two)\n  (three))"))
  (should (string= (vilpy-with "(progn\n  |(one)\n  (two)\n  (three))"
                               (progn (vilpy-copy)
                                      (vilpy-down 2)
                                      (vilpy-paste 1)))
                   "(progn\n  (one)\n  (two)\n  (one)|\n  (three))"))
  (should (string= (vilpy-with "(progn\n  (one)|\n  (two)\n  (three))"
                               (progn (vilpy-copy)
                                      (vilpy-down 1)
                                      (vilpy-paste 1)))
                   "(progn\n  (one)\n  (two)\n  (one)|\n  (three))"))
  (should (string= (vilpy-with "(progn\n  (one)|\n  (two)\n  (three))"
                               (progn (vilpy-copy)
                                      (vilpy-down 2)
                                      (vilpy-paste 1)))
                   "(progn\n  (one)\n  (two)\n  (three)\n  (one)|)")))

(ert-deftest vilpy--balance ()
  (should (string= (vilpy--balance "(a")
                   "(a)"))
  (should (string= (vilpy--balance "a)")
                   "(a)"))
  (should (string= (vilpy--balance "a)(b")
                   "(a)(b)"))
  (should (string= (vilpy--balance "({[a b] c")
                   "({[a b] c})"))
  (should (string= (vilpy--balance "a [b c]})")
                   "({a [b c]})"))
  (should (string= (vilpy--balance "a)]}({[b")
                   "{[(a)]}({[b]})")))

(ert-deftest vilpy-repeat ()
  (should (string= (vilpy-with "(message \"a witch\")|"
                               "2w..")
                   "(message \"a witch\")\n(message \"a witch\")\n(message \"a witch\")\n(message \"a witch\")\n(message \"a witch\")|")))

(ert-deftest vilpy-interleave ()
  (should (equal (vilpy-interleave 0 '(1 2 3))
                 '(1 0 2 0 3)))
  (should (equal (vilpy-interleave 1 '(1 2 3))
                 '(1 2 1 3)))
  (should (equal (vilpy-interleave 2 '(1 2 3))
                 '(1 2 3)))
  (should (equal (vilpy-interleave 3 '(1 2 3))
                 '(1 3 2 3)))
  (should (equal (vilpy-interleave 0 '(1 2 3 4 5 6 7 8 9 10) 2)
                 '(1 2 0 3 4 0 5 6 0 7 8 0 9 10)))
  (should (equal (vilpy-interleave 0 '(1 2 3 4 5 6 7 8 9 10) 3)
                 '(1 2 3 0 4 5 6 0 7 8 9 0 10)))
  (should (equal (vilpy-interleave 3 '(1 2 3 4 5 6 7 8 9 10) 3)
                 '(1 2 3 4 5 6 3 7 8 9 3 10))))

(ert-deftest vilpy-eval-str-racket ()
  (let ((geiser-active-implementations '(racket)))
    (should (equal (vilpy-with-v scm
                       "(list #hash|((1 . 2) (3 . 4)))"
                     (vilpy--string-dwim))
                   "#hash((1 . 2) (3 . 4))"))
    (should (equal (vilpy-with-v scm
                       "(list #hash((1 . 2) (3 . 4))| foo)"
                     (vilpy--string-dwim))
                   "#hash((1 . 2) (3 . 4))"))))

;; Quarentine - these tests fail even without any modification to vilpy

;; (ert-deftest vilpy-move-down ()
;;   (should (string= (vilpy-with "(|(a) (b) (c))" "s")
;;                    "((b) |(a) (c))"))
;;   (should (string= (vilpy-with "(|(a) (b) (c))" "ss")
;;                    "((b) (c) |(a))"))
;;   (should (string= (vilpy-with "(|(a) (b) (c))" "sss")
;;                    "((b) (c) |(a))"))
;;   (should (string= (vilpy-with "((a)| (b) (c))" "s")
;;                    "((b) (a)| (c))"))
;;   (should (string= (vilpy-with "((a)| (b) (c))" "ss")
;;                    "((b) (c) (a)|)"))
;;   (should (string= (vilpy-with "((a)| (b) (c))" "sss")
;;                    "((b) (c) (a)|)"))
;;   (should (string= (vilpy-with "(|(a) (b) (c))" "m]s")
;;                    "((c) ~(a) (b)|)"))
;;   (should (string= (vilpy-with "(f|oo bar)"
;;                                (kbd "M-m")
;;                                "s")
;;                    "(bar ~foo|)"))
;;   (should (string= (vilpy-with "(foo ~bar|)" "s")
;;                    "(foo ~bar|)"))
;;   (should (string= (vilpy-with "(put :foo 1\n     ~:baz '(1 2 3)|\n     :bar 2)"
;;                                (vilpy-move-down 2))
;;                    "(put :foo 1\n     :bar 2\n     ~:baz '(1 2 3)|)"))
;;   (should (string= (vilpy-with "(put :foo 1\n     |:baz '(1 2 3)~\n     :bar 2)"
;;                                (vilpy-move-down 2))
;;                    "(put :foo 1\n     :bar 2\n     |:baz '(1 2 3)~)"))
;;   (should (string= (vilpy-with "(foo |(bar) baz)" "s")
;;                    "(foo baz |(bar))"))
;;   (should (string= (vilpy-with "('|(a) '(b) '(c))" "s")
;;                    "('(b) '|(a) '(c))"))
;;   (should (string= (vilpy-with "('(a)| '(b) '(c))" "s")
;;                    "('(b) '(a)| '(c))"))
;;   (should (string= (vilpy-with "(a)\n|(b)" "s")
;;                    "(a)\n|(b)"))
;;   (unless (version<= emacs-version "24.3.1")
;;     (should (string= (vilpy-with "|;;; a\n(foo)\n;;; b\n(bar)\n;;; c\n(baz)" "s")
;;                      ";;; b\n(bar)\n|;;; a\n(foo)\n;;; c\n(baz)"))
;;     (should (string= (vilpy-with "|;;; a\n(foo)\n;;; b\n(bar)\n;;; c\n(baz)" "2s")
;;                      ";;; b\n(bar)\n;;; c\n(baz)\n|;;; a\n(foo)"))))

;; (ert-deftest vilpy-move-up ()
;;   (should (string= (vilpy-with "((a) (b) |(c))" "w")
;;                    "((a) |(c) (b))"))
;;   (should (string= (vilpy-with "((a) (b) |(c))" "ww")
;;                    "(|(c) (a) (b))"))
;;   (should (string= (vilpy-with "((a) (b) |(c))" "www")
;;                    "(|(c) (a) (b))"))
;;   (should (string= (vilpy-with "((a) (b) (c)|)" "w")
;;                    "((a) (c)| (b))"))
;;   (should (string= (vilpy-with "((a) (b) (c)|)" "ww")
;;                    "((c)| (a) (b))"))
;;   (should (string= (vilpy-with "((a) (b) (c)|)" "www")
;;                    "((c)| (a) (b))"))
;;   (should (string= (vilpy-with "((a) |(b) (c))" "m>w")
;;                    "(~(b) (c)| (a))"))
;;   (should (string= (vilpy-with "((a) |(b) (c))" "mjw")
;;                    "((a) ~(c)| (b))"))
;;   (should (string= (vilpy-with "(foo b|ar)"
;;                                (kbd "M-m")
;;                                "w")
;;                    "(~bar| foo)"))
;;   (should (string= (vilpy-with "(~foo| bar)" "w")
;;                    "(~foo| bar)"))
;;   (should (string= (vilpy-with clojure "{&foo| bar}" "w")
;;                    "{&foo| bar}"))
;;   (should (string= (vilpy-with clojure "[&foo| bar]" "w")
;;                    "[&foo| bar]"))
;;   (should (string= (vilpy-with "(put :foo 1\n     :bar 2\n     |:baz '(1 2 3)~)"
;;                                (vilpy-move-up 2))
;;                    "(put :foo 1\n     |:baz '(1 2 3)~\n     :bar 2)"))
;;   (should (string= (vilpy-with "(put :foo 1\n     :bar 2\n     ~:baz '(1 2 3)|)"
;;                                (vilpy-move-up 2))
;;                    "(put :foo 1\n     ~:baz '(1 2 3)|\n     :bar 2)"))
;;   (should (string= (vilpy-with "(foo baz |(bar))" "w")
;;                    "(foo |(bar) baz)"))
;;   (should (string= (vilpy-with "('(b) '|(a) '(c))" "w")
;;                    "('|(a) '(b) '(c))"))
;;   (should (string= (vilpy-with "('(b) '(a)| '(c))" "w")
;;                    "('(a)| '(b) '(c))"))
;;   (unless (version<= emacs-version "24.3.1")

;;     (should (string= (vilpy-with ";;; b\n(bar)\n;;; c\n(baz)\n|;;; a\n(foo)" "w")
;;                      ";;; b\n(bar)\n|;;; a\n(foo)\n;;; c\n(baz)"))
;;     (should (string= (let ((vilpy-outline ";;;"))
;;                        (vilpy-with ";;; b\n(bar)\n;;; c\n(baz)\n|;;; a\n(foo)" "2w"))
;;                      "|;;; a\n(foo)\n;;; b\n(bar)\n;;; c\n(baz)")))
;;   (should (string= (vilpy-with "(sexp (one)\n      ;; comment\n      |(two))" "w")
;;                    "(sexp (one)\n      |(two)\n      ;; comment\n      )")))

(provide 'vilpy-test)

;;; vilpy-test.el ends here
